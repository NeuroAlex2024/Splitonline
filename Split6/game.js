// ===============================
// –õ–ê–ë–ò–†–ò–ù–¢ –ü–û–ì–û–ù–ò - GAME ENGINE
// –û–ù–õ–ê–ô–ù –í–ï–†–°–ò–Ø 3.0 —Å Socket.IO
// ===============================

const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');
const minimap = document.getElementById('minimap');
const minimapCtx = minimap.getContext('2d');

// üåê –ú–£–õ–¨–¢–ò–ü–õ–ï–ï–† –°–ò–°–¢–ï–ú–ê
let socket = null;
let isOnlineMode = false;
let onlineGameState = {
    roomCode: null,
    playerId: null,
    playerRole: null, // 'host' –∏–ª–∏ 'guest'
    gameRole: null,   // 'hunter' –∏–ª–∏ 'prey'
    myCharacter: null,
    opponentCharacter: null,
    isConnected: false,
    opponentPosition: { x: 0, y: 0, angle: 0 },
    lastSentPosition: { x: 0, y: 0, angle: 0 },
    inputBuffer: []
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket.IO
function initSocket() {
    if (socket) return;
    
    socket = io();
    
    socket.on('connect', () => {
        console.log('üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É');
        onlineGameState.isConnected = true;
        updateConnectionStatus('connected', '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É');
    });
    
    socket.on('disconnect', () => {
        console.log('üåê –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        onlineGameState.isConnected = false;
        updateConnectionStatus('error', '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ');
    });
    
    // –°–æ–±—ã—Ç–∏—è –∫–æ–º–Ω–∞—Ç
    socket.on('room-created', (data) => {
        onlineGameState.roomCode = data.roomCode;
        onlineGameState.playerRole = data.role;
        showLobby();
        updateRoomCode(data.roomCode);
    });
    
    socket.on('room-joined', (data) => {
        onlineGameState.roomCode = data.roomCode;
        onlineGameState.playerRole = data.role;
        showLobby();
        updateRoomCode(data.roomCode);
    });
    
    socket.on('player-joined', (data) => {
        updatePlayersInLobby(data.players);
    });
    
    socket.on('character-selected', (data) => {
        updatePlayersInLobby(data.players);
    });
    
    socket.on('game-start', (data) => {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—à—É —Ä–æ–ª—å –≤ –∏–≥—Ä–µ
        const myPlayer = data.players.find(p => p.socketId === socket.id);
        const opponent = data.players.find(p => p.socketId !== socket.id);
        
        onlineGameState.gameRole = myPlayer.gameRole;
        onlineGameState.myCharacter = myPlayer.character;
        onlineGameState.opponentCharacter = opponent.character;
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–≥—Ä—É –¥–ª—è –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞
        isOnlineMode = true;
        characterSelection.hunter = onlineGameState.gameRole === 'hunter' ? onlineGameState.myCharacter : onlineGameState.opponentCharacter;
        characterSelection.prey = onlineGameState.gameRole === 'prey' ? onlineGameState.myCharacter : onlineGameState.opponentCharacter;
        
        startOnlineGame();
    });
    
    socket.on('opponent-input', (data) => {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–≤–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –∫ –µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂—É
        if (onlineGameState.gameRole === 'hunter' && preyPlayer) {
            updatePlayerFromInput(preyPlayer, data.controls, onlineGameState.opponentCharacter);
        } else if (onlineGameState.gameRole === 'prey' && hunterPlayer) {
            updatePlayerFromInput(hunterPlayer, data.controls, onlineGameState.opponentCharacter);
        }
    });
    
    socket.on('opponent-position', (data) => {
        onlineGameState.opponentPosition = {
            x: data.x,
            y: data.y,
            angle: data.angle,
            timestamp: data.timestamp
        };
    });
    
    socket.on('booster-sync-collected', (data) => {
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–±–æ—Ä –±—É—Å—Ç–µ—Ä–∞
        for (let i = 0; i < boosters.length; i++) {
            if (boosters[i].id === data.boosterId) {
                boosters[i].collected = true;
                break;
            }
        }
    });
    
    socket.on('game-ended', (data) => {
        endGame(data.winner);
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç
        gameState.scores = data.scores;
    });
    
    socket.on('next-round', (data) => {
        gameState.roundNumber = data.roundNumber;
        gameState.scores = data.scores;
        nextRound();
    });
    
    socket.on('series-ended', (data) => {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        setTimeout(() => {
            alert(`–°–µ—Ä–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${data.finalWinner === 'hunter' ? '–û—Ö–æ—Ç–Ω–∏–∫' : '–î–æ–±—ã—á–∞'}`);
        }, 1000);
    });
    
    socket.on('player-disconnected', (data) => {
        alert('–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è');
        leaveLobby();
    });
    
    socket.on('error', (data) => {
        alert('–û—à–∏–±–∫–∞: ' + data.message);
        updateConnectionStatus('error', data.message);
    });
}

// üéÆ –°–ò–°–¢–ï–ú–ê –ù–ê–°–¢–†–û–ï–ö –ì–†–ê–§–ò–ö–ò
const GRAPHICS_PRESETS = {
    LOW: {
        targetFPS: 30,
        maxParticles: 15,
        particleUpdateInterval: 4,
        backgroundRedrawInterval: 8,
        trailLength: 5,
        shadows: false,
        effects: false,
        interpolation: false,
        resolutionScale: 0.33  // 33% —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è (–±—ã–ª–æ 50%)
    },
    MED: {
        targetFPS: 60,
        maxParticles: 50,
        particleUpdateInterval: 2,
        backgroundRedrawInterval: 3,
        trailLength: 10,
        shadows: true,
        effects: true,
        interpolation: true,
        resolutionScale: 0.5  // 50% —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è (–±—ã–ª–æ 75%)
    },
    HIGH: {
        targetFPS: 120,
        maxParticles: 100,
        particleUpdateInterval: 1,
        backgroundRedrawInterval: 1,
        trailLength: 20,
        shadows: true,
        effects: true,
        interpolation: true,
        resolutionScale: 1.0  // 100% —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    }
};

// –ò–≥—Ä–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã (—Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏)
const GAME_CONFIG = {
    worldWidth: 2340,
    worldHeight: 1175,
    baseCanvasWidth: 1680,  // –ë–∞–∑–æ–≤–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    baseCanvasHeight: 900,
    canvasWidth: 1680,      // –¢–µ–∫—É—â–µ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ (–±—É–¥–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å—Å—è)
    canvasHeight: 900,
    cellSize: 50,
    catchDistance: 45,
    roundTime: 120,
    boosterLifetime: 15000,
    boosterSpawnRate: 0.008,
    totalRounds: 5,
    lastBoosterSpawnTime: 0,
    minBoosterInterval: 4000,
    maxBoosterInterval: 6000,
    targetBoosterCount: 6,
    initialBoosterDelay: 2000,
    
    // üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò (–±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∏–∑ –ø—Ä–µ—Å–µ—Ç–æ–≤)
    targetFPS: 60,
    maxParticles: 50,
    particleUpdateInterval: 2,
    renderSkipFrames: 0,
    backgroundRedrawInterval: 3,
    
    // üéÆ –ü–ï–†–ï–ö–õ–Æ–ß–ê–¢–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø
    controlsSwapped: false,
    
    // üé® –ù–ê–°–¢–†–û–ô–ö–ò –ì–†–ê–§–ò–ö–ò
    graphicsLevel: 'MED',
    autoAdapt: true
};

// üéØ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å GAME_CONFIG)
// let controlState = {
//     swapped: false,
//     hunterColor: '#ff4757', // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –æ—Ö–æ—Ç–Ω–∏–∫–∞
//     preyColor: '#3742fa',   // –°–∏–Ω–∏–π –¥–ª—è –¥–æ–±—ã—á–∏
// };

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
let gameState = {
    mode: 'start', // start, playing, ended
    startTime: 0,
    roundNumber: 1,
    winner: null,
    gameTime: 0,
    scores: { // –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç
        hunter: 0,
        prey: 0
    }
};

// –í—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
let characterSelection = {
    hunter: null, // 'punk' –∏–ª–∏ 'businessman'
    prey: null    // 'punk' –∏–ª–∏ 'businessman'
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã
let playerConfig = null;

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–≥—Ä–æ–∫–∏ (—Å–æ–∑–¥–∞—é—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞)
let hunterPlayer = null;
let preyPlayer = null;

// –ò–≥—Ä–æ–∫–∏
const players = {
    punk: {
        x: 100,
        y: 100,
        width: 35,
        height: 45,
        originalWidth: 35,
        originalHeight: 45,
        speed: 0,
        maxSpeed: 7,
        baseMaxSpeed: 7, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
        acceleration: 0.6,
        baseAcceleration: 0.6, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ
        angle: 0,
        boosts: new Map(),
        trail: [],
        isGhost: false,
        ghostCooldown: 0,
        actionPressed: false,
        lastSafeX: 100,
        lastSafeY: 100,
        // –°–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –≥–∏–≥–∞–Ω—Ç–∞
        giantScale: 1,
        giantAnimationTime: 0,
        isGiant: false,
        lastWallBreakTime: 0
    },
    businessman: {
        x: GAME_CONFIG.worldWidth - 150,
        y: GAME_CONFIG.worldHeight - 150,
        width: 30,
        height: 40,
        originalWidth: 30,
        originalHeight: 40,
        speed: 0,
        maxSpeed: 7,
        baseMaxSpeed: 7,
        acceleration: 0.5,
        baseAcceleration: 0.5,
        angle: 0,
        boosts: new Map(),
        trail: [],
        isGhost: false,
        ghostCooldown: 0,
        actionPressed: false,
        lastSafeX: GAME_CONFIG.worldWidth - 150,
        lastSafeY: GAME_CONFIG.worldHeight - 150,
        // –°–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –≥–∏–≥–∞–Ω—Ç–∞
        giantScale: 1,
        giantAnimationTime: 0,
        isGiant: false,
        lastWallBreakTime: 0
    },
    kok: {
        x: 100,
        y: 100,
        width: 32,
        height: 42,
        originalWidth: 32,
        originalHeight: 42,
        speed: 0,
        maxSpeed: 7,
        baseMaxSpeed: 7,
        acceleration: 0.55,
        baseAcceleration: 0.55,
        angle: 0,
        boosts: new Map(),
        trail: [],
        isGhost: false,
        ghostCooldown: 0,
        actionPressed: false,
        lastSafeX: 100,
        lastSafeY: 100,
        // –°–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –≥–∏–≥–∞–Ω—Ç–∞
        giantScale: 1,
        giantAnimationTime: 0,
        isGiant: false,
        lastWallBreakTime: 0
    },
    maks: {
        x: 100,
        y: 100,
        width: 38, // –ù–∞ 20% —à–∏—Ä–µ —á–µ–º —É –°—Ç–µ–ø—ã (32 * 1.2 = 38.4, –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ 38)
        height: 42,
        originalWidth: 38,
        originalHeight: 42,
        speed: 0,
        maxSpeed: 7,
        baseMaxSpeed: 7,
        acceleration: 0.55,
        baseAcceleration: 0.55,
        angle: 0,
        boosts: new Map(),
        trail: [],
        isGhost: false,
        ghostCooldown: 0,
        actionPressed: false,
        lastSafeX: 100,
        lastSafeY: 100,
        // –°–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –≥–∏–≥–∞–Ω—Ç–∞
        giantScale: 1,
        giantAnimationTime: 0,
        isGiant: false,
        lastWallBreakTime: 0
    }
};

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
const keys = {};
const controls = {
    punk: {
        up: 'ArrowUp',
        down: 'ArrowDown',
        left: 'ArrowLeft',
        right: 'ArrowRight',
        action: 'Slash'
    },
    businessman: {
        up: 'KeyW',
        down: 'KeyS',
        left: 'KeyA',
        right: 'KeyD',
        action: 'KeyE'
    },
    kok: {
        up: 'KeyW',
        down: 'KeyS',
        left: 'KeyA',
        right: 'KeyD',
        action: 'KeyE'
    },
    maks: {
        up: 'KeyW',
        down: 'KeyS',
        left: 'KeyA',
        right: 'KeyD',
        action: 'KeyE'
    }
};

// –õ–∞–±–∏—Ä–∏–Ω—Ç –∏ –æ–±—ä–µ–∫—Ç—ã
let maze = [];
let boosters = [];
let particles = [];
let walls = [];

// –¢–∏–ø—ã –±—É—Å—Ç–µ—Ä–æ–≤
const BOOSTER_TYPES = {
    speed: {
        color: '#00ff88',
        glowColor: 'rgba(0, 255, 136, 0.8)',
        symbol: '‚ö°',
        name: '–°–∫–æ—Ä–æ—Å—Ç—å',
        duration: 5000
    },
    ghost: {
        color: '#9c88ff',
        glowColor: 'rgba(156, 136, 255, 0.8)',
        symbol: 'üëª',
        name: '–ü—Ä–∏–∑—Ä–∞–∫',
        duration: 4000
    },
    teleport: {
        color: '#ff6b35',
        glowColor: 'rgba(255, 107, 53, 0.8)',
        symbol: 'üéØ',
        name: '–¢–µ–ª–µ–ø–æ—Ä—Ç',
        duration: 0, // –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
        distance: 450 // –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 300 –¥–æ 450 (–Ω–∞ 50% –¥–∞–ª—å—à–µ)
    },
    giant: {
        color: '#ffd700',
        glowColor: 'rgba(255, 215, 0, 0.8)',
        symbol: 'ü¶æ',
        name: '–ì–∏–≥–∞–Ω—Ç',
        duration: 3000
    }
};

// ===============================
// –°–û–ë–´–¢–ò–Ø –ò –ú–£–ó–´–ö–ê
// ===============================

document.addEventListener('keydown', (e) => {
    keys[e.code] = true;
    e.preventDefault();
});

document.addEventListener('keyup', (e) => {
    keys[e.code] = false;
    e.preventDefault();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
document.addEventListener('keydown', (e) => {
    if (e.code === 'F11') {
        e.preventDefault();
        toggleFullscreen();
    }
});

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–º —Ä–µ–∂–∏–º–æ–º
function toggleFullscreen() {
    const gameContainer = document.querySelector('.game-container');
    
    if (!document.fullscreenElement) {
        gameContainer.requestFullscreen().catch(err => {
            console.log(`Error attempting to enable fullscreen: ${err.message}`);
        });
    } else {
        document.exitFullscreen();
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
function handleResize() {
    // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
    clearTimeout(window.resizeTimeout);
    window.resizeTimeout = setTimeout(() => {
        initializeCanvas();
        // –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ª–∞–±–∏—Ä–∏–Ω—Ç –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞
        if (gameState.mode !== 'playing') {
            generateMaze();
        }
    }, 100);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
window.addEventListener('load', () => {
    initializeCanvas();
    generateMaze();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
window.addEventListener('resize', handleResize);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤  
window.addEventListener('orientationchange', () => {
    setTimeout(() => {
        handleResize();
    }, 100);
});

// ===============================
// –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ê–Ø –ú–£–ó–´–ö–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê
// ===============================

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—É–∑—ã–∫–æ–π
function playMusic(type) {
    const music = document.getElementById('backgroundMusic');
    switch(type) {
        case 'chase': music.src = 'assets/music/chase.mp3'; break;
        case 'stealth': music.src = 'assets/music/stealth.mp3'; break;
        case 'victory': music.src = 'assets/music/victory.mp3'; break;
        case 'defeat': music.src = 'assets/music/defeat.mp3'; break;
    }
    music.play();
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é playBackgroundMusic
function playBackgroundMusic() {
    playMusic('chase'); // –ó–∞–ø—É—Å–∫–∞–µ–º chase.mp3 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
}

// ===============================
// –ì–ï–ù–ï–†–ê–¶–ò–Ø –õ–ê–ë–ò–†–ò–ù–¢–ê
// ===============================

function generateMaze() {
    const cols = Math.floor(GAME_CONFIG.worldWidth / GAME_CONFIG.cellSize);
    const rows = Math.floor(GAME_CONFIG.worldHeight / GAME_CONFIG.cellSize);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ç–∫–∏
    maze = Array(rows).fill().map(() => Array(cols).fill(1));
    walls = [];
    
    // –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –æ–±—Ö–æ–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
    function carvePassages(x, y) {
        maze[y][x] = 0;
        
        const directions = [
            [0, -2], [2, 0], [0, 2], [-2, 0]
        ].sort(() => Math.random() - 0.5);
        
        for (const [dx, dy] of directions) {
            const nx = x + dx;
            const ny = y + dy;
            
            if (nx >= 0 && nx < cols && ny >= 0 && ny < rows && maze[ny][nx] === 1) {
                maze[y + dy/2][x + dx/2] = 0;
                carvePassages(nx, ny);
            }
        }
    }
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Å –≤–µ—Ä—Ö–Ω–µ–≥–æ –ª–µ–≤–æ–≥–æ —É–≥–ª–∞
    carvePassages(1, 1);
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å–≤–æ–±–æ–¥–Ω—ã
    maze[1][1] = 0;
    maze[1][2] = 0;
    maze[2][1] = 0;
    
    const endX = cols - 2;
    const endY = rows - 2;
    maze[endY][endX] = 0;
    maze[endY-1][endX] = 0;
    maze[endY][endX-1] = 0;
    
    // –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ö–æ–¥—ã –¥–ª—è –±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –≥–µ–π–º–ø–ª–µ—è
    for (let i = 0; i < Math.floor(rows * cols * 0.08); i++) {
        const x = Math.floor(Math.random() * cols);
        const y = Math.floor(Math.random() * rows);
        if (maze[y] && maze[y][x] !== undefined) {
            maze[y][x] = 0;
        }
    }
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç–µ–Ω—ã –¥–ª—è –∫–æ–ª–ª–∏–∑–∏–π
    for (let y = 0; y < rows; y++) {
        for (let x = 0; x < cols; x++) {
            if (maze[y][x] === 1) {
                walls.push({
                    x: x * GAME_CONFIG.cellSize,
                    y: y * GAME_CONFIG.cellSize,
                    width: GAME_CONFIG.cellSize,
                    height: GAME_CONFIG.cellSize
                });
            }
        }
    }
}

// ===============================
// –ß–ê–°–¢–ò–¶–´ –ò –≠–§–§–ï–ö–¢–´
// ===============================

// üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü—É–ª –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —á–∞—Å—Ç–∏—Ü
const particlePool = [];
const maxPoolSize = 100;

class OptimizedParticle {
    constructor(x, y, color, velocity, life, size = 3) {
        this.reset(x, y, color, velocity, life, size);
    }
    
    reset(x, y, color, velocity, life, size = 3) {
        this.x = x;
        this.y = y;
        this.color = color;
        this.velocity = velocity;
        this.life = life;
        this.maxLife = life;
        this.size = size;
        this.gravity = Math.random() * 0.5;
        this.active = true;
    }

    update(deltaTime) {
        if (!this.active) return false;
        
        this.x += this.velocity.x * deltaTime / 16.67;
        this.y += this.velocity.y * deltaTime / 16.67;
        this.velocity.y += this.gravity;
        this.life -= deltaTime;
        this.size *= 0.99;
        
        if (this.life <= 0) {
            this.active = false;
            return false;
        }
        return true;
    }

    draw(ctx, offsetX, offsetY) {
        if (!this.active) return;
        
        const alpha = Math.max(0, this.life / this.maxLife);
        ctx.save();
        ctx.globalAlpha = alpha;
        ctx.fillStyle = this.color;
        ctx.beginPath();
        ctx.arc(this.x - offsetX, this.y - offsetY, this.size, 0, Math.PI * 2);
        ctx.fill();
        ctx.restore();
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ —á–∞—Å—Ç–∏—Ü
for (let i = 0; i < maxPoolSize; i++) {
    particlePool.push(new OptimizedParticle(0, 0, '#ffffff', {x: 0, y: 0}, 0));
}

// üöÄ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Å—Ç–∏—Ü
function createOptimizedParticles(x, y, color, count = 10) {
    const currentActiveCount = particles.filter(p => p.active).length;
    if (currentActiveCount >= GAME_CONFIG.maxParticles) return;
    
    const maxNewParticles = Math.min(count, GAME_CONFIG.maxParticles - currentActiveCount);
    
    for (let i = 0; i < maxNewParticles; i++) {
        let particle = particlePool.find(p => !p.active);
        if (!particle) {
            particle = new OptimizedParticle(0, 0, '#ffffff', {x: 0, y: 0}, 0);
            particlePool.push(particle);
        }
        
        const angle = (Math.PI * 2 * i) / maxNewParticles + Math.random() * 0.5;
        const speed = Math.random() * 150 + 50;
        const velocity = {
            x: Math.cos(angle) * speed,
            y: Math.sin(angle) * speed
        };
        
        particle.reset(x, y, color, velocity, 1500, Math.random() * 4 + 1);
        particles.push(particle);
    }
}

// ===============================
// –ö–û–õ–õ–ò–ó–ò–ò
// ===============================

function checkCollision(rect1, rect2) {
    return rect1.x < rect2.x + rect2.width &&
           rect1.x + rect1.width > rect2.x &&
           rect1.y < rect2.y + rect2.height &&
           rect1.y + rect1.height > rect2.y;
}

function checkWallCollision(player, newX, newY) {
    if (player.isGhost) return false;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü –º–∏—Ä–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –æ—Ç—Å—Ç—É–ø–æ–º
    const borderMargin = 10;
    if (newX < borderMargin || 
        newY < borderMargin || 
        newX + player.width > GAME_CONFIG.worldWidth - borderMargin || 
        newY + player.height > GAME_CONFIG.worldHeight - borderMargin) {
        return true;
    }
    
    const testRect = {
        x: newX + 5, // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –æ—Ç—Å—Ç—É–ø
        y: newY + 5,
        width: player.width - 10,
        height: player.height - 10
    };
    
    return walls.some(wall => checkCollision(testRect, wall));
}

function getDistanceBetweenPlayers() {
    if (!hunterPlayer || !preyPlayer) return 1000;
    
    const dx = hunterPlayer.x - preyPlayer.x;
    const dy = hunterPlayer.y - preyPlayer.y;
    return Math.sqrt(dx * dx + dy * dy);
}

// ===============================
// –ë–£–°–¢–ï–†–´
// ===============================

function spawnBooster() {
    const cols = Math.floor(GAME_CONFIG.worldWidth / GAME_CONFIG.cellSize);
    const rows = Math.floor(GAME_CONFIG.worldHeight / GAME_CONFIG.cellSize);
    
    let attempts = 0;
    let x, y;
    
    do {
        const col = Math.floor(Math.random() * cols);
        const row = Math.floor(Math.random() * rows);
        x = col * GAME_CONFIG.cellSize + GAME_CONFIG.cellSize / 2 - 15;
        y = row * GAME_CONFIG.cellSize + GAME_CONFIG.cellSize / 2 - 15;
        attempts++;
    } while (
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è –Ω–µ –≤ —Å—Ç–µ–Ω–µ
        (maze[Math.floor(y / GAME_CONFIG.cellSize)] && 
         maze[Math.floor(y / GAME_CONFIG.cellSize)][Math.floor(x / GAME_CONFIG.cellSize)] === 1) ||
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è –Ω–µ –∑–∞ –≥—Ä–∞–Ω–∏—Ü–µ–π –∏–≥—Ä–æ–≤–æ–π –∑–æ–Ω—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø 100px –æ—Ç –≥—Ä–∞–Ω–∏—Ü—ã)
        y > GAME_CONFIG.worldHeight - 150 ||
        attempts < 50
    );
    
    const types = Object.keys(BOOSTER_TYPES);
    const type = types[Math.floor(Math.random() * types.length)];
    
    boosters.push({
        x: x,
        y: y,
        width: 30,
        height: 30,
        type: type,
        collected: false,
        rotation: 0,
        pulse: 0,
        lifetime: GAME_CONFIG.boosterLifetime,
        opacity: 1,
        id: `booster_${Date.now()}_${Math.random().toString(36).substr(2, 9)}` // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞
    });
}

function updateBoosters(deltaTime) {
    boosters = boosters.filter(booster => {
        if (booster.collected) return false;
        
        booster.lifetime -= deltaTime;
        booster.rotation += 0.05;
        booster.pulse += 0.1;
        
        // –≠—Ñ—Ñ–µ–∫—Ç –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
        if (booster.lifetime < 3000) {
            booster.opacity = booster.lifetime / 3000;
        }
        
        return booster.lifetime > 0;
    });
}

function checkBoosterCollisions(player) {
    boosters.forEach(booster => {
        if (!booster.collected && checkCollision(player, booster)) {
            booster.collected = true;
            
            // üåê –ú–£–õ–¨–¢–ò–ü–õ–ï–ï–†: –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–±–æ—Ä–µ –±—É—Å—Ç–µ—Ä–∞
            if (isOnlineMode && booster.id) {
                sendBoosterCollected(booster.id);
            }
            
            const boosterType = BOOSTER_TYPES[booster.type];
            
            // –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã
            createOptimizedParticles(
                booster.x + booster.width / 2,
                booster.y + booster.height / 2,
                boosterType.color,
                20
            );
            
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞
            if (booster.type === 'teleport') {
                // –¢–µ–ª–µ–ø–æ—Ä—Ç –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
                teleportPlayer(player);
            } else if (booster.type === 'giant') {
                // –ì–∏–≥–∞–Ω—Ç –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è —Å—Ç–µ–Ω
                player.boosts.set(booster.type, {
                    duration: boosterType.duration,
                    startTime: Date.now()
                });
                
                // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≥–∏–≥–∞–Ω—Ç–∞
                createOptimizedParticles(
                    player.x + player.width / 2,
                    player.y + player.height / 2,
                    BOOSTER_TYPES.giant.color,
                    30
                );
            } else {
                // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –±—É—Å—Ç–µ—Ä–æ–≤ –ø—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç
                player.boosts.set(booster.type, {
                    duration: boosterType.duration,
                    startTime: Date.now()
                });
            }
        }
    });
}

// ===============================
// –¢–ï–õ–ï–ü–û–†–¢–ê–¶–ò–Ø
// ===============================

function teleportPlayer(player) {
    // –í—Å–µ–≥–¥–∞ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏, –∫—É–¥–∞ —Å–º–æ—Ç—Ä–∏—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂
    const teleportDirection = {
        x: Math.cos(player.angle),
        y: Math.sin(player.angle)
    };
    
    const teleportDistance = BOOSTER_TYPES.teleport.distance;
    const targetX = player.x + teleportDirection.x * teleportDistance;
    const targetY = player.y + teleportDirection.y * teleportDistance;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –º–∏—Ä–∞
    const clampedX = Math.max(0, Math.min(GAME_CONFIG.worldWidth - player.width, targetX));
    const clampedY = Math.max(0, Math.min(GAME_CONFIG.worldHeight - player.height, targetY));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ —Å–æ —Å—Ç–µ–Ω–∞–º–∏
    if (!checkWallCollision(player, clampedX, clampedY)) {
        // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –≤ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        createOptimizedParticles(
            player.x + player.width / 2,
            player.y + player.height / 2,
            BOOSTER_TYPES.teleport.color,
            30
        );
        
        // –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–∞
        player.x = clampedX;
        player.y = clampedY;
        player.lastSafeX = clampedX;
        player.lastSafeY = clampedY;
        
        // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è –≤ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
        createOptimizedParticles(
            player.x + player.width / 2,
            player.y + player.height / 2,
            BOOSTER_TYPES.teleport.color,
            30
        );
        
        return true; // –£—Å–ø–µ—à–Ω–∞—è —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è
    } else {
        // –ï—Å–ª–∏ —Ü–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, –∏—â–µ–º –±–ª–∏–∂–∞–π—à—É—é —Å–≤–æ–±–æ–¥–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        const directions = [];
        const steps = 24; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞
        
        // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Ä–∞–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –ø–æ–∏—Å–∫–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –¥–∏—Å—Ç–∞–Ω—Ü–∏—è–º–∏
        for (let i = 0; i < steps; i++) {
            const angle = (i / steps) * Math.PI * 2;
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏: –æ—Ç 60% –¥–æ 120% –æ—Ç –±–∞–∑–æ–≤–æ–π –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
            const distanceMultiplier = 0.6 + (i / steps) * 0.6;
            const distance = teleportDistance * distanceMultiplier;
            directions.push({
                x: Math.cos(angle) * distance,
                y: Math.sin(angle) * distance
            });
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –æ—Ç —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ (–±–ª–∏–∂–∞–π—à–∏–µ —Å–Ω–∞—á–∞–ª–∞)
        directions.sort((a, b) => {
            const distA = Math.hypot(a.x, a.y);
            const distB = Math.hypot(b.x, b.y);
            return distA - distB;
        });
        
        // –ò—â–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        for (const dir of directions) {
            const testX = player.x + dir.x;
            const testY = player.y + dir.y;
            const clampedTestX = Math.max(0, Math.min(GAME_CONFIG.worldWidth - player.width, testX));
            const clampedTestY = Math.max(0, Math.min(GAME_CONFIG.worldHeight - player.height, testY));
            
            if (!checkWallCollision(player, clampedTestX, clampedTestY)) {
                // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
                createOptimizedParticles(
                    player.x + player.width / 2,
                    player.y + player.height / 2,
                    BOOSTER_TYPES.teleport.color,
                    30
                );
                
                // –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–∞
                player.x = clampedTestX;
                player.y = clampedTestY;
                player.lastSafeX = clampedTestX;
                player.lastSafeY = clampedTestY;
                
                // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è
                createOptimizedParticles(
                    player.x + player.width / 2,
                    player.y + player.height / 2,
                    BOOSTER_TYPES.teleport.color,
                    30
                );
                
                return true; // –£—Å–ø–µ—à–Ω–∞—è —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é, –ø–æ–ø—Ä–æ–±—É–µ–º —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∏—Å—Ç–∞–Ω—Ü–∏—é
        const minDistance = 100;
        for (let i = 0; i < 8; i++) {
            const angle = (i / 8) * Math.PI * 2;
            const testX = player.x + Math.cos(angle) * minDistance;
            const testY = player.y + Math.sin(angle) * minDistance;
            const clampedTestX = Math.max(0, Math.min(GAME_CONFIG.worldWidth - player.width, testX));
            const clampedTestY = Math.max(0, Math.min(GAME_CONFIG.worldHeight - player.height, testY));
            
            if (!checkWallCollision(player, clampedTestX, clampedTestY)) {
                // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
                createOptimizedParticles(
                    player.x + player.width / 2,
                    player.y + player.height / 2,
                    BOOSTER_TYPES.teleport.color,
                    20
                );
                
                // –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–∞
                player.x = clampedTestX;
                player.y = clampedTestY;
                player.lastSafeX = clampedTestX;
                player.lastSafeY = clampedTestY;
                
                // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è
                createOptimizedParticles(
                    player.x + player.width / 2,
                    player.y + player.height / 2,
                    BOOSTER_TYPES.teleport.color,
                    20
                );
                
                return true; // –£—Å–ø–µ—à–Ω–∞—è —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∏—Å—Ç–∞–Ω—Ü–∏—é
            }
        }
    }
    
    return false; // –ù–µ —É–¥–∞–ª–æ—Å—å —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è
}

// ===============================
// –û–ë–ù–û–í–õ–ï–ù–ò–ï –ò–ì–†–û–ö–ê
// ===============================

function updatePlayer(player, controls, deltaTime, characterType) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É–ª–¥–∞—É–Ω –ø—Ä–∏–∑—Ä–∞–∫–∞/—Ç–µ–ª–µ–ø–æ—Ä—Ç–∞
    if (player.ghostCooldown > 0) {
        player.ghostCooldown -= deltaTime;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è
    if (keys[controls.action] && !player.actionPressed && player.ghostCooldown <= 0) {
        player.actionPressed = true;
        
        // –†–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        if (characterType === 'punk') {
            // –ü—Ä–∏–∑—Ä–∞–∫ –¥–ª—è –°–∞–Ω–∏ - –∫—É–ª–¥–∞—É–Ω 8 —Å–µ–∫—É–Ω–¥
            player.ghostCooldown = getCharacterCooldown(characterType);
            player.boosts.set('ghost', {
                duration: 1000,
                startTime: Date.now()
            });
            
            // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–∏–∑—Ä–∞–∫–∞
            createOptimizedParticles(
                player.x + player.width / 2,
                player.y + player.height / 2,
                '#9c88ff',
                15
            );
        } else if (characterType === 'businessman') {
            // –¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è –¥–ª—è –õ–µ—Ö–∏ - –∫—É–ª–¥–∞—É–Ω 5 —Å–µ–∫—É–Ω–¥
            if (teleportPlayer(player)) {
                player.ghostCooldown = getCharacterCooldown(characterType);
                // –°–æ–∑–¥–∞—ë–º —ç—Ñ—Ñ–µ–∫—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞
                createOptimizedParticles(
                    player.x + player.width / 2,
                    player.y + player.height / 2,
                    BOOSTER_TYPES.teleport.color,
                    20
                );
            }
        } else if (characterType === 'kok') {
            // –£—Å–∫–æ—Ä–µ–Ω–∏–µ –¥–ª—è –°—Ç–µ–ø—ã - –∫—É–ª–¥–∞—É–Ω 5 —Å–µ–∫—É–Ω–¥
            player.ghostCooldown = getCharacterCooldown(characterType);
            player.boosts.set('speed', {
                duration: 2000, // 2 —Å–µ–∫—É–Ω–¥—ã —É—Å–∫–æ—Ä–µ–Ω–∏—è
                startTime: Date.now()
            });
            
            // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —É—Å–∫–æ—Ä–µ–Ω–∏—è
            createOptimizedParticles(
                player.x + player.width / 2,
                player.y + player.height / 2,
                '#00ff88',
                20
            );
        } else if (characterType === 'maks') {
            // –ì–∏–≥–∞–Ω—Ç –¥–ª—è –ú–∞–∫—Å–∞ - –∫—É–ª–¥–∞—É–Ω 8 —Å–µ–∫—É–Ω–¥
            player.ghostCooldown = getCharacterCooldown(characterType);
            player.boosts.set('giant', {
                duration: 1500, // 1.5 —Å–µ–∫—É–Ω–¥—ã –≥–∏–≥–∞–Ω—Ç–∞
                startTime: Date.now()
            });
            
            // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≥–∏–≥–∞–Ω—Ç–∞
            createOptimizedParticles(
                player.x + player.width / 2,
                player.y + player.height / 2,
                '#ffd700', // –ñ–µ–ª—Ç—ã–π —Ü–≤–µ—Ç –∫–∞–∫ —É –±—É—Å—Ç–µ—Ä–∞ –≥–∏–≥–∞–Ω—Ç–∞
                25
            );
        }
    }
    
    // –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –∫–Ω–æ–ø–∫–∏ –∫–æ–≥–¥–∞ –æ—Ç–ø—É—Å–∫–∞—é—Ç
    if (!keys[controls.action]) {
        player.actionPressed = false;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±—É—Å—Ç–µ—Ä—ã
    for (const [type, boost] of player.boosts) {
        boost.duration -= deltaTime;
        if (boost.duration <= 0) {
            player.boosts.delete(type);
        }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≥–∏–≥–∞–Ω—Ç–∞
    if (player.boosts.has('giant')) {
        player.isGiant = true;
        player.giantAnimationTime += deltaTime;
        
        // –ü–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –¥–æ 2x —Ä–∞–∑–º–µ—Ä–∞
        const animationDuration = 500; // 0.5 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—é
        if (player.giantAnimationTime <= animationDuration) {
            const progress = player.giantAnimationTime / animationDuration;
            player.giantScale = 1 + progress; // –û—Ç 1x –¥–æ 2x
        } else {
            player.giantScale = 2; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä 2x
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–≥—Ä–æ–∫–∞
        player.width = player.originalWidth * player.giantScale;
        player.height = player.originalHeight * player.giantScale;
        
        // –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ —Å—Ç–µ–Ω –≤–æ –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –±—É—Å—Ç–µ—Ä–∞
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 200ms –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
        if (!player.lastWallBreakTime || Date.now() - player.lastWallBreakTime > 200) {
            breakWalls(player);
            player.lastWallBreakTime = Date.now();
        }
    } else {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É
        if (player.isGiant) {
            player.isGiant = false;
            player.giantAnimationTime = 0;
            player.giantScale = 1;
            player.width = player.originalWidth;
            player.height = player.originalHeight;
            player.lastWallBreakTime = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        }
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –±—É—Å—Ç–µ—Ä–æ–≤
    player.maxSpeed = player.characterType === 'punk' ? 7 : 
                     player.characterType === 'businessman' ? 7 : 7;
    player.isGhost = false;
    
    if (player.boosts.has('speed')) {
        if (player.characterType === 'kok') {
            player.maxSpeed *= 1.3; // –£—Å–∫–æ—Ä–µ–Ω–∏–µ –≤ 1.3 —Ä–∞–∑–∞ –¥–ª—è –°—Ç–µ–ø—ã –ö–æ–∫
        } else {
            player.maxSpeed *= 1.6; // –û–±—ã—á–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –¥–ª—è –±—É—Å—Ç–µ—Ä–æ–≤
        }
    }
    if (player.boosts.has('ghost')) {
        player.isGhost = true;
    }
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    let moveX = 0;
    let moveY = 0;
    
    if (keys[controls.left]) moveX -= 1;
    if (keys[controls.right]) moveX += 1;
    if (keys[controls.up]) moveY -= 1;
    if (keys[controls.down]) moveY += 1;
    
    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
    if (moveX !== 0 && moveY !== 0) {
        moveX *= 0.707;
        moveY *= 0.707;
    }
    
    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
    if (moveX !== 0 || moveY !== 0) {
        player.speed = Math.min(player.speed + player.acceleration, player.maxSpeed);
        player.angle = Math.atan2(moveY, moveX);
    } else {
        player.speed = Math.max(player.speed - player.acceleration * 2, 0);
    }
    
    // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ —Å –±–æ–ª–µ–µ –º—è–≥–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–æ–ª–ª–∏–∑–∏–π
    const moveSpeed = player.speed;
    const newX = player.x + Math.cos(player.angle) * moveSpeed;
    const newY = player.y + Math.sin(player.angle) * moveSpeed;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –±–µ–∑–æ–ø–∞—Å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
    if (!checkWallCollision(player, player.x, player.y)) {
        player.lastSafeX = player.x;
        player.lastSafeY = player.y;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π —Å–æ —Å—Ç–µ–Ω–∞–º–∏ —Å –æ—Ç—Å—Ç—É–ø–æ–º
    const margin = 2; // –û—Ç—Å—Ç—É–ø –æ—Ç —Å—Ç–µ–Ω
    if (!checkWallCollision(player, newX, player.y)) {
        player.x = newX;
    } else {
        // –ü–æ–ø—ã—Ç–∫–∞ —Å–∫–æ–ª—å–∂–µ–Ω–∏—è –ø–æ —Å—Ç–µ–Ω–µ
        if (!checkWallCollision(player, player.x + Math.cos(player.angle) * moveSpeed * 0.3, player.y)) {
            player.x += Math.cos(player.angle) * moveSpeed * 0.3;
        }
    }
    
    if (!checkWallCollision(player, player.x, newY)) {
        player.y = newY;
    } else {
        // –ü–æ–ø—ã—Ç–∫–∞ —Å–∫–æ–ª—å–∂–µ–Ω–∏—è –ø–æ —Å—Ç–µ–Ω–µ
        if (!checkWallCollision(player, player.x, player.y + Math.sin(player.angle) * moveSpeed * 0.3)) {
            player.y += Math.sin(player.angle) * moveSpeed * 0.3;
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏–µ –≤ —Å—Ç–µ–Ω–µ –ø–æ—Å–ª–µ –ø—Ä–∏–∑—Ä–∞–∫–∞
    if (!player.isGhost && checkWallCollision(player, player.x, player.y)) {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –±–µ–∑–æ–ø–∞—Å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        if (!checkWallCollision(player, player.lastSafeX, player.lastSafeY)) {
            player.x = player.lastSafeX;
            player.y = player.lastSafeY;
        } else {
            // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º –≤—ã—Ç–∞–ª–∫–∏–≤–∞–Ω–∏—è
            const directions = [];
            const steps = 64; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
            const maxDistance = 150; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
            
            // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Ä–∞–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å –±–æ–ª–µ–µ –ø–ª–æ—Ç–Ω–æ–π —Å–µ—Ç–∫–æ–π
            for (let i = 0; i < steps; i++) {
                const angle = (i / steps) * Math.PI * 2;
                const distance = (i / steps) * maxDistance;
                directions.push({
                    x: Math.cos(angle) * distance,
                    y: Math.sin(angle) * distance
                });
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
            for (let i = 0; i < 32; i++) {
                const angle = (i / 32) * Math.PI * 2;
                directions.push({
                    x: Math.cos(angle) * 30,
                    y: Math.sin(angle) * 30
                });
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫ —Ü–µ–Ω—Ç—Ä—É –∫–∞—Ä—Ç—ã –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏—è –≤ —É–≥–ª–∞—Ö
            const centerX = GAME_CONFIG.worldWidth / 2;
            const centerY = GAME_CONFIG.worldHeight / 2;
            const toCenterX = centerX - player.x;
            const toCenterY = centerY - player.y;
            const centerDistance = Math.hypot(toCenterX, toCenterY);
            
            if (centerDistance > 0) {
                directions.push({
                    x: (toCenterX / centerDistance) * 100,
                    y: (toCenterY / centerDistance) * 100
                });
            }
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –æ—Ç —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
            directions.sort((a, b) => {
                const distA = Math.hypot(a.x, a.y);
                const distB = Math.hypot(b.x, b.y);
                return distA - distB;
            });
            
            let foundSafePosition = false;
            
            // –ü—Ä–æ–±—É–µ–º –≤—ã—Ç–æ–ª–∫–Ω—É—Ç—å –≤ –∫–∞–∂–¥–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
            for (const dir of directions) {
                const testX = player.x + dir.x;
                const testY = player.y + dir.y;
                
                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –º–∏—Ä–∞
                const clampedX = Math.max(20, Math.min(GAME_CONFIG.worldWidth - player.width - 20, testX));
                const clampedY = Math.max(20, Math.min(GAME_CONFIG.worldHeight - player.height - 20, testY));
                
                if (!checkWallCollision(player, clampedX, clampedY)) {
                    player.x = clampedX;
                    player.y = clampedY;
                    player.lastSafeX = clampedX;
                    player.lastSafeY = clampedY;
                    foundSafePosition = true;
                    break;
                }
            }
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤—ã—Ç–∞–ª–∫–∏–≤–∞–Ω–∏–µ
            if (!foundSafePosition) {
                // –ü—Ä–æ–±—É–µ–º –≤—ã—Ç–æ–ª–∫–Ω—É—Ç—å –≤ 8 –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö —Å –±–æ–ª—å—à–µ–π —Å–∏–ª–æ–π
                const forceDirections = [
                    {x: -80, y: 0}, {x: 80, y: 0}, {x: 0, y: -80}, {x: 0, y: 80},
                    {x: -56, y: -56}, {x: 56, y: -56}, {x: -56, y: 56}, {x: 56, y: 56}
                ];
                
                for (const dir of forceDirections) {
                    const testX = player.x + dir.x;
                    const testY = player.y + dir.y;
                    
                    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –º–∏—Ä–∞
                    const clampedX = Math.max(20, Math.min(GAME_CONFIG.worldWidth - player.width - 20, testX));
                    const clampedY = Math.max(20, Math.min(GAME_CONFIG.worldHeight - player.height - 20, testY));
                    
                    if (!checkWallCollision(player, clampedX, clampedY)) {
                        player.x = clampedX;
                        player.y = clampedY;
                        player.lastSafeX = clampedX;
                        player.lastSafeY = clampedY;
                        foundSafePosition = true;
                        break;
                    }
                }
                
                // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è –Ω–∞ —Å–ª—É—á–∞–π–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –≤ —Ü–µ–Ω—Ç—Ä–µ –∫–∞—Ä—Ç—ã
                if (!foundSafePosition) {
                    let attempts = 0;
                    while (attempts < 100) {
                        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é –±–ª–∏–∂–µ –∫ —Ü–µ–Ω—Ç—Ä—É –∫–∞—Ä—Ç—ã
                        const centerX = GAME_CONFIG.worldWidth / 2;
                        const centerY = GAME_CONFIG.worldHeight / 2;
                        const radius = Math.min(GAME_CONFIG.worldWidth, GAME_CONFIG.worldHeight) / 4;
                        
                        const randomAngle = Math.random() * Math.PI * 2;
                        const randomRadius = Math.random() * radius;
                        
                        const randomX = centerX + Math.cos(randomAngle) * randomRadius;
                        const randomY = centerY + Math.sin(randomAngle) * randomRadius;
                        
                        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –º–∏—Ä–∞
                        const clampedX = Math.max(20, Math.min(GAME_CONFIG.worldWidth - player.width - 20, randomX));
                        const clampedY = Math.max(20, Math.min(GAME_CONFIG.worldHeight - player.height - 20, randomY));
                        
                        if (!checkWallCollision(player, clampedX, clampedY)) {
                            player.x = clampedX;
                            player.y = clampedY;
                            player.lastSafeX = clampedX;
                            player.lastSafeY = clampedY;
                            foundSafePosition = true;
                            break;
                        }
                        attempts++;
                    }
                }
            }
            
            // –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ –Ω–∞—à–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ü–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã
            if (!foundSafePosition) {
                const centerX = GAME_CONFIG.worldWidth / 2;
                const centerY = GAME_CONFIG.worldHeight / 2;
                player.x = centerX;
                player.y = centerY;
                player.lastSafeX = centerX;
                player.lastSafeY = centerY;
            }
        }
    }
    
    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –º–∏—Ä–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –æ—Ç—Å—Ç—É–ø–æ–º
    const worldMargin = 20;
    player.x = Math.max(worldMargin, Math.min(GAME_CONFIG.worldWidth - player.width - worldMargin, player.x));
    player.y = Math.max(worldMargin, Math.min(GAME_CONFIG.worldHeight - player.height - worldMargin, player.y));
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–µ–¥–∞
    if (player.speed > 2) {
        player.trail.push({
            x: player.x + player.width / 2,
            y: player.y + player.height / 2,
            life: 800,
            opacity: 1
        });
    }
    
    player.trail = player.trail.filter(point => {
        point.life -= deltaTime;
        point.opacity = point.life / 800;
        return point.life > 0;
    });
}

// ===============================
// –û–¢–†–ò–°–û–í–ö–ê
// ===============================

function drawBackground(ctx, offsetX, offsetY) {
    // –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
    const gradient = ctx.createRadialGradient(
        GAME_CONFIG.canvasWidth / 2, GAME_CONFIG.canvasHeight / 2, 0,
        GAME_CONFIG.canvasWidth / 2, GAME_CONFIG.canvasHeight / 2, GAME_CONFIG.canvasWidth
    );
    gradient.addColorStop(0, '#1a1a2e');
    gradient.addColorStop(0.5, '#16213e');
    gradient.addColorStop(1, '#0f0f23');
    
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, GAME_CONFIG.canvasWidth, GAME_CONFIG.canvasHeight);
    
    // –í–∏–¥–∏–º–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ (–∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –∏–≥—Ä–æ–≤–æ–π –∑–æ–Ω—ã)
    const borderY = GAME_CONFIG.worldHeight - offsetY;
    if (borderY > 0 && borderY < GAME_CONFIG.canvasHeight) {
        // –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
        const borderGradient = ctx.createLinearGradient(0, borderY, 0, borderY + 20);
        borderGradient.addColorStop(0, 'rgba(255, 0, 0, 0.8)');
        borderGradient.addColorStop(0.5, 'rgba(255, 0, 0, 0.4)');
        borderGradient.addColorStop(1, 'rgba(255, 0, 0, 0.1)');
        
        ctx.fillStyle = borderGradient;
        ctx.fillRect(0, borderY, GAME_CONFIG.canvasWidth, 20);
        
        // –ù–µ–æ–Ω–æ–≤–∞—è –ª–∏–Ω–∏—è
        ctx.strokeStyle = '#ff0000';
        ctx.lineWidth = 3;
        ctx.shadowColor = '#ff0000';
        ctx.shadowBlur = 10;
        ctx.beginPath();
        ctx.moveTo(0, borderY);
        ctx.lineTo(GAME_CONFIG.canvasWidth, borderY);
        ctx.stroke();
        ctx.shadowBlur = 0;
    }
}

function drawMaze(ctx, offsetX, offsetY) {
    walls.forEach(wall => {
        const x = wall.x - offsetX;
        const y = wall.y - offsetY;
        
        if (x > -GAME_CONFIG.cellSize && x < GAME_CONFIG.canvasWidth && 
            y > -GAME_CONFIG.cellSize && y < GAME_CONFIG.canvasHeight) {
            
            // –ì—Ä–∞–¥–∏–µ–Ω—Ç –¥–ª—è —Å—Ç–µ–Ω
            const gradient = ctx.createLinearGradient(x, y, x + wall.width, y + wall.height);
            gradient.addColorStop(0, '#2c3e50');
            gradient.addColorStop(0.5, '#34495e');
            gradient.addColorStop(1, '#2c3e50');
            
            ctx.fillStyle = gradient;
            ctx.fillRect(x, y, wall.width, wall.height);
            
            // –ù–µ–æ–Ω–æ–≤—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
            ctx.strokeStyle = '#00ff88';
            ctx.lineWidth = 2;
            ctx.shadowColor = '#00ff88';
            ctx.shadowBlur = 10;
            ctx.strokeRect(x, y, wall.width, wall.height);
            ctx.shadowBlur = 0;
        }
    });
}

function drawPlayer(ctx, player, offsetX, offsetY) {
    const x = player.x + player.width / 2 - offsetX;
    const y = player.y + player.height / 2 - offsetY;
    ctx.save();
    ctx.translate(x, y);
    ctx.rotate(player.angle + Math.PI / 2);
    
    // –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏–∑—Ä–∞–∫–∞
    if (player.isGhost) {
        ctx.globalAlpha = 0.6;
        ctx.shadowColor = '#9c88ff';
        ctx.shadowBlur = 20;
    }
    
    // –≠—Ñ—Ñ–µ–∫—Ç –≥–∏–≥–∞–Ω—Ç–∞
    if (player.isGiant) {
        ctx.shadowColor = BOOSTER_TYPES.giant.glowColor;
        ctx.shadowBlur = 30;
        ctx.globalAlpha = 0.9;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –¥—Ä–æ–∂–∞–Ω–∏—è –¥–ª—è –≥–∏–≥–∞–Ω—Ç–∞
        const shake = Math.sin(Date.now() * 0.01) * 2;
        ctx.translate(shake, shake);
    }
    
    // –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≥–∏–≥–∞–Ω—Ç–∞
    if (player.giantScale > 1) {
        ctx.scale(player.giantScale, player.giantScale);
    }
    
    if (player.characterType === 'punk') {
        // –ü–∞–Ω–∫ —Å –∏—Ä–æ–∫–µ–∑–æ–º - —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –∏ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
        // –¢–µ–ª–æ
        ctx.fillStyle = '#1e3799';
        ctx.fillRect(-18, -12, 36, 40);
        
        // –ì–æ–ª–æ–≤–∞
        ctx.fillStyle = '#feca57';
        ctx.fillRect(-15, -30, 30, 25);
        
        // –ò—Ä–æ–∫–µ–∑
        ctx.fillStyle = '#2c2c54';
        ctx.fillRect(-4, -42, 8, 18);
        
        // –î–µ—Ç–∞–ª–∏ –ª–∏—Ü–∞
        ctx.fillStyle = '#000';
        ctx.fillRect(-10, -25, 4, 4);
        ctx.fillRect(6, -25, 4, 4);
        
        // –†–æ—Ç
        ctx.fillStyle = '#e74c3c';
        ctx.fillRect(-6, -18, 12, 3);
        
        // –†—É–∫–∏
        ctx.fillStyle = '#feca57';
        ctx.fillRect(-25, -8, 10, 18);
        ctx.fillRect(15, -8, 10, 18);
        
        // –ù–æ–≥–∏
        ctx.fillStyle = '#2c2c54';
        ctx.fillRect(-12, 28, 10, 18);
        ctx.fillRect(2, 28, 10, 18);
        
    } else if (player.characterType === 'businessman') {
        // –ë–∏–∑–Ω–µ—Å–º–µ–Ω - –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
        // –¢–µ–ª–æ (–∫–æ—Å—Ç—é–º)
        ctx.fillStyle = '#2c3e50';
        ctx.fillRect(-15, -10, 30, 38);
        
        // –†—É–±–∞—à–∫–∞
        ctx.fillStyle = '#ecf0f1';
        ctx.fillRect(-12, -8, 24, 30);
        
        // –ì–∞–ª—Å—Ç—É–∫
        ctx.fillStyle = '#e74c3c';
        ctx.fillRect(-3, -8, 6, 25);
        
        // –ì–æ–ª–æ–≤–∞
        ctx.fillStyle = '#feca57';
        ctx.fillRect(-12, -27, 24, 22);
        
        // –í–æ–ª–æ—Å—ã
        ctx.fillStyle = '#8b4513';
        ctx.fillRect(-12, -30, 24, 10);
        
        // –ë–æ—Ä–æ–¥–∞
        ctx.fillStyle = '#654321';
        ctx.fillRect(-10, -10, 20, 8);
        
        // –ì–ª–∞–∑–∞
        ctx.fillStyle = '#000';
        ctx.fillRect(-8, -22, 3, 3);
        ctx.fillRect(5, -22, 3, 3);
        
        // –†—É–∫–∏
        ctx.fillStyle = '#feca57';
        ctx.fillRect(-20, -5, 8, 15);
        ctx.fillRect(12, -5, 8, 15);
        
        // –ù–æ–≥–∏
        ctx.fillStyle = '#2c3e50';
        ctx.fillRect(-10, 28, 8, 15);
        ctx.fillRect(2, 28, 8, 15);
    } else if (player.characterType === 'kok') {
        // –°—Ç–µ–ø–∞ –ö–æ–∫ - –Ω–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂
        // –¢–µ–ª–æ (—Ç–µ–º–Ω–æ-—Å–µ—Ä–∞—è –∫–æ—Ñ—Ç–∞)
        ctx.fillStyle = '#4a4a4a';
        ctx.fillRect(-16, -10, 32, 38);
        
        // –†—É–∫–∏
        ctx.fillStyle = '#feca57';
        ctx.fillRect(-22, -8, 8, 16);
        ctx.fillRect(14, -8, 8, 16);
        
        // –ì–æ–ª–æ–≤–∞
        ctx.fillStyle = '#feca57';
        ctx.fillRect(-12, -25, 24, 20);
        
        // –í–æ–ª–Ω–∏—Å—Ç—ã–µ –≤–æ–ª–æ—Å—ã —Å—Ä–µ–¥–Ω–µ–π –¥–ª–∏–Ω—ã
        ctx.fillStyle = '#8b4513';
        ctx.beginPath();
        ctx.arc(-8, -28, 6, 0, Math.PI * 2);
        ctx.arc(-2, -30, 5, 0, Math.PI * 2);
        ctx.arc(4, -29, 6, 0, Math.PI * 2);
        ctx.arc(10, -27, 5, 0, Math.PI * 2);
        ctx.fill();
        
        // –ó–µ–ª–µ–Ω—ã–µ –≥–ª–∞–∑–∞
        ctx.fillStyle = '#00ff00';
        ctx.fillRect(-8, -20, 3, 3);
        ctx.fillRect(5, -20, 3, 3);
        
        // –†–æ—Ç
        ctx.fillStyle = '#e74c3c';
        ctx.fillRect(-4, -15, 8, 2);
        
        // –¶–µ–ø–æ—á–∫–∞ —Å –ø–æ–¥–≤–µ—Å–∫–æ–π –Ω–∞ —à–µ–µ
        ctx.strokeStyle = '#ffd700';
        ctx.lineWidth = 2;
        ctx.beginPath();
        ctx.arc(0, -5, 8, 0, Math.PI * 2);
        ctx.stroke();
        ctx.fillStyle = '#ffd700';
        ctx.fillRect(-2, -3, 4, 6);
        
        // –ù–æ–≥–∏ (—Ç–µ–º–Ω–æ-—Å–∏–Ω–∏–µ –¥–∂–∏–Ω—Å—ã)
        ctx.fillStyle = '#1e3a8a';
        ctx.fillRect(-10, 28, 8, 15);
        ctx.fillRect(2, 28, 8, 15);
        
        // –ö–µ–¥—ã
        ctx.fillStyle = '#ffffff';
        ctx.fillRect(-12, 43, 12, 4);
        ctx.fillRect(0, 43, 12, 4);
    } else if (player.characterType === 'maks') {
        // –ú–∞–∫—Å –ó–¥–æ—Ä–æ–≤—ã–π - –Ω–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂
        // –¢–µ–ª–æ (—Ç–µ–º–Ω–æ-—Å–∏–Ω—è—è –∫–æ—Ñ—Ç–∞)
        ctx.fillStyle = '#1e3a8a';
        ctx.fillRect(-19, -10, 38, 38);
        
        // –†—É–∫–∏
        ctx.fillStyle = '#feca57';
        ctx.fillRect(-25, -8, 10, 16);
        ctx.fillRect(15, -8, 10, 16);
        
        // –ì–æ–ª–æ–≤–∞
        ctx.fillStyle = '#feca57';
        ctx.fillRect(-15, -25, 30, 20);
        
        // –°–≤–µ—Ç–ª–æ-—Ä—É—Å—ã–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –≤–æ–ª–æ—Å—ã
        ctx.fillStyle = '#d4af37';
        ctx.fillRect(-15, -30, 30, 8);
        
        // –ì–æ–ª—É–±—ã–µ –≥–ª–∞–∑–∞
        ctx.fillStyle = '#87ceeb';
        ctx.fillRect(-10, -18, 4, 4);
        ctx.fillRect(6, -18, 4, 4);
        
        // –ú–∞—Å—Å–∏–≤–Ω–∞—è —á–µ–ª—é—Å—Ç—å
        ctx.fillStyle = '#feca57';
        ctx.fillRect(-12, -8, 24, 6);
        
        // –†–æ—Ç
        ctx.fillStyle = '#e74c3c';
        ctx.fillRect(-5, -12, 10, 2);
        
        // –ù–æ–≥–∏ (—Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–µ —Ç—Ä–µ–Ω–∏–∫–∏)
        ctx.fillStyle = '#c0c0c0';
        ctx.fillRect(-12, 28, 10, 15);
        ctx.fillRect(2, 28, 10, 15);
        
        // –ë–µ–ª—ã–µ –∫—Ä–æ—Å—ã
        ctx.fillStyle = '#ffffff';
        ctx.fillRect(-15, 43, 15, 4);
        ctx.fillRect(0, 43, 15, 4);
    }
    
    ctx.restore();
    
    // –°–ª–µ–¥
    player.trail.forEach(point => {
        ctx.save();
        ctx.globalAlpha = point.opacity * 0.7;
        ctx.fillStyle = player.characterType === 'punk' ? '#ff4757' : 
                       player.characterType === 'businessman' ? '#3742fa' : 
                       player.characterType === 'kok' ? '#00ff88' : '#ffd700';
        ctx.shadowColor = ctx.fillStyle;
        ctx.shadowBlur = 5;
        ctx.beginPath();
        ctx.arc(point.x - offsetX, point.y - offsetY, 4, 0, Math.PI * 2);
        ctx.fill();
        ctx.restore();
    });
}

function drawBooster(ctx, booster, offsetX, offsetY) {
    if (booster.collected) return;
    
    const x = booster.x + booster.width / 2 - offsetX;
    const y = booster.y + booster.height / 2 - offsetY;
    
    if (x < -50 || x > GAME_CONFIG.canvasWidth + 50 || 
        y < -50 || y > GAME_CONFIG.canvasHeight + 50) return;
    
    const boosterType = BOOSTER_TYPES[booster.type];
    const size = 15 + Math.sin(booster.pulse) * 4;
    
    ctx.save();
    ctx.globalAlpha = booster.opacity;
    ctx.translate(x, y);
    ctx.rotate(booster.rotation);
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞
    if (booster.type === 'teleport') {
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ –¥–ª—è —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞
        ctx.shadowColor = boosterType.glowColor;
        ctx.shadowBlur = 35;
        
        // –í–Ω–µ—à–Ω–∏–π –∫—Ä—É–≥ —Å –ø—É–ª—å—Å–∞—Ü–∏–µ–π
        const outerSize = size + 8 + Math.sin(booster.pulse * 2) * 6;
        ctx.strokeStyle = boosterType.color;
        ctx.lineWidth = 3;
        ctx.beginPath();
        ctx.arc(0, 0, outerSize, 0, Math.PI * 2);
        ctx.stroke();
        
        // –°—Ä–µ–¥–Ω–∏–π –∫—Ä—É–≥
        const middleSize = size + 4;
        ctx.strokeStyle = boosterType.color;
        ctx.lineWidth = 2;
        ctx.globalAlpha = booster.opacity * 0.7;
        ctx.beginPath();
        ctx.arc(0, 0, middleSize, 0, Math.PI * 2);
        ctx.stroke();
        
        ctx.globalAlpha = booster.opacity;
    }
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –≥–∏–≥–∞–Ω—Ç–∞
    if (booster.type === 'giant') {
        // –£—Å–∏–ª–µ–Ω–Ω–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ –¥–ª—è –≥–∏–≥–∞–Ω—Ç–∞
        ctx.shadowColor = boosterType.glowColor;
        ctx.shadowBlur = 40;
        
        // –í–Ω–µ—à–Ω–∏–π –∫—Ä—É–≥ —Å –ø—É–ª—å—Å–∞—Ü–∏–µ–π
        const outerSize = size + 12 + Math.sin(booster.pulse * 1.5) * 8;
        ctx.strokeStyle = boosterType.color;
        ctx.lineWidth = 4;
        ctx.beginPath();
        ctx.arc(0, 0, outerSize, 0, Math.PI * 2);
        ctx.stroke();
        
        // –°—Ä–µ–¥–Ω–∏–π –∫—Ä—É–≥
        const middleSize = size + 6;
        ctx.strokeStyle = boosterType.color;
        ctx.lineWidth = 3;
        ctx.globalAlpha = booster.opacity * 0.8;
        ctx.beginPath();
        ctx.arc(0, 0, middleSize, 0, Math.PI * 2);
        ctx.stroke();
        
        ctx.globalAlpha = booster.opacity;
        
        // –≠—Ñ—Ñ–µ–∫—Ç –¥—Ä–æ–∂–∞–Ω–∏—è –¥–ª—è –≥–∏–≥–∞–Ω—Ç–∞
        const shake = Math.sin(booster.pulse * 3) * 2;
        ctx.translate(shake, shake);
    }
    
    // –°–≤–µ—á–µ–Ω–∏–µ
    ctx.shadowColor = boosterType.glowColor;
    ctx.shadowBlur = 25;
    
    // –û—Å–Ω–æ–≤–Ω–æ–π –∫—Ä—É–≥
    ctx.fillStyle = boosterType.color;
    ctx.beginPath();
    ctx.arc(0, 0, size, 0, Math.PI * 2);
    ctx.fill();
    
    // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Å–∏–º–≤–æ–ª
    ctx.shadowBlur = 0;
    ctx.fillStyle = '#fff';
    ctx.font = 'bold 16px Arial';
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    ctx.fillText(boosterType.symbol, 0, 0);
    
    ctx.restore();
}

function drawMinimap() {
    const minimapWidth = minimap.width;
    const minimapHeight = minimap.height;
    
    // –í—ã—á–∏—Å–ª—è–µ–º –º–∞—Å—à—Ç–∞–± –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–π –∏–≥—Ä–æ–≤–æ–≥–æ –º–∏—Ä–∞
    const scaleX = minimapWidth / GAME_CONFIG.worldWidth;
    const scaleY = minimapHeight / GAME_CONFIG.worldHeight;
    const scale = Math.min(scaleX, scaleY); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω—å—à–∏–π –º–∞—Å—à—Ç–∞–± –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
    
    // –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
    const offsetX = (minimapWidth - GAME_CONFIG.worldWidth * scale) / 2;
    const offsetY = (minimapHeight - GAME_CONFIG.worldHeight * scale) / 2;
    
    minimapCtx.clearRect(0, 0, minimapWidth, minimapHeight);
    
    // –§–æ–Ω –º–∏–Ω–∏–∫–∞—Ä—Ç—ã
    minimapCtx.fillStyle = 'rgba(0, 0, 0, 0.9)';
    minimapCtx.fillRect(0, 0, minimapWidth, minimapHeight);
    
    // –†–∞–º–∫–∞
    minimapCtx.strokeStyle = '#00ff88';
    minimapCtx.lineWidth = 2;
    minimapCtx.strokeRect(1, 1, minimapWidth - 2, minimapHeight - 2);
    
    // –°—Ç–µ–Ω—ã
    minimapCtx.fillStyle = '#334155';
    walls.forEach(wall => {
        minimapCtx.fillRect(
            wall.x * scale + offsetX,
            wall.y * scale + offsetY,
            Math.max(1, wall.width * scale),
            Math.max(1, wall.height * scale)
        );
    });
    
    // –ë—É—Å—Ç–µ—Ä—ã
    boosters.forEach(booster => {
        if (!booster.collected) {
            minimapCtx.save();
            minimapCtx.strokeStyle = '#ffd700';
            minimapCtx.lineWidth = 2;
            minimapCtx.shadowColor = '#ffd700';
            minimapCtx.shadowBlur = 8;
            minimapCtx.beginPath();
            minimapCtx.arc(
                booster.x * scale + offsetX,
                booster.y * scale + offsetY,
                5, 0, Math.PI * 2
            );
            minimapCtx.stroke();
            minimapCtx.shadowBlur = 0;
            minimapCtx.fillStyle = '#fff200';
            minimapCtx.beginPath();
            minimapCtx.arc(
                booster.x * scale + offsetX,
                booster.y * scale + offsetY,
                3, 0, Math.PI * 2
            );
            minimapCtx.fill();
            minimapCtx.restore();
        }
    });
    
    // –û—Ö–æ—Ç–Ω–∏–∫ (–∫—Ä–∞—Å–Ω–∞—è —Ç–æ—á–∫–∞)
    if (hunterPlayer) {
        minimapCtx.fillStyle = '#ef4444';
        minimapCtx.shadowColor = '#ef4444';
        minimapCtx.shadowBlur = 8;
        minimapCtx.beginPath();
        minimapCtx.arc(
            hunterPlayer.x * scale + offsetX,
            hunterPlayer.y * scale + offsetY,
            4, 0, Math.PI * 2
        );
        minimapCtx.fill();
        minimapCtx.shadowBlur = 0;
    }
    
    // –î–æ–±—ã—á–∞ (—Å–∏–Ω—è—è —Ç–æ—á–∫–∞)
    if (preyPlayer) {
        minimapCtx.fillStyle = '#3b82f6';
        minimapCtx.shadowColor = '#3b82f6';
        minimapCtx.shadowBlur = 8;
        minimapCtx.beginPath();
        minimapCtx.arc(
            preyPlayer.x * scale + offsetX,
            preyPlayer.y * scale + offsetY,
            4, 0, Math.PI * 2
        );
        minimapCtx.fill();
        minimapCtx.shadowBlur = 0;
    }
}

function render() {
    // –†–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω
    const splitY = GAME_CONFIG.canvasHeight / 2;

    // –í–µ—Ä—Ö–Ω—è—è –ø–æ–ª–æ–≤–∏–Ω–∞ - –≤–∏–¥ –æ—Ö–æ—Ç–Ω–∏–∫–∞
    ctx.save();
    ctx.beginPath();
    ctx.rect(0, 0, GAME_CONFIG.canvasWidth, splitY);
    ctx.clip();

    // –í–µ—Ä—Ö–Ω—è—è –∫–∞–º–µ—Ä–∞ –≤—Å–µ–≥–¥–∞ —Å–ª–µ–¥—É–µ—Ç –∑–∞ –æ—Ö–æ—Ç–Ω–∏–∫–æ–º
    if (hunterPlayer && typeof hunterPlayer.x === 'number' && typeof hunterPlayer.y === 'number') {
        const offsetX1 = hunterPlayer.x - GAME_CONFIG.canvasWidth / 2;
        const offsetY1 = hunterPlayer.y - splitY / 2;

        // üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ—Ç—Ä–∏—Å–æ–≤–∫—É —Ñ–æ–Ω–∞
        drawOptimizedBackground(ctx, offsetX1, offsetY1);
        drawMaze(ctx, offsetX1, offsetY1);
        
        // üöÄ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –±—É—Å—Ç–µ—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –≤–∏–¥–∏–º—ã–µ)
        boosters.forEach(booster => {
            const boosterX = booster.x - offsetX1;
            const boosterY = booster.y - offsetY1;
            if (boosterX > -100 && boosterX < GAME_CONFIG.canvasWidth + 100 &&
                boosterY > -100 && boosterY < splitY + 100) {
                drawBooster(ctx, booster, offsetX1, offsetY1);
            }
        });
        
        // üöÄ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ —á–∞—Å—Ç–∏—Ü (—Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –≤–∏–¥–∏–º—ã–µ)
        particles.filter(p => p.active).forEach(particle => {
            const particleX = particle.x - offsetX1;
            const particleY = particle.y - offsetY1;
            if (particleX > -50 && particleX < GAME_CONFIG.canvasWidth + 50 &&
                particleY > -50 && particleY < splitY + 50) {
                particle.draw(ctx, offsetX1, offsetY1);
            }
        });
        
        if (hunterPlayer) drawPlayer(ctx, hunterPlayer, offsetX1, offsetY1);
        if (preyPlayer) drawPlayer(ctx, preyPlayer, offsetX1, offsetY1);
    }
    ctx.restore();

    // üöÄ –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
            ctx.strokeStyle = GAME_CONFIG.controlsSwapped ? '#ff4757' : '#00ff88';
    ctx.lineWidth = 4;
    ctx.beginPath();
    ctx.moveTo(0, splitY);
    ctx.lineTo(GAME_CONFIG.canvasWidth, splitY);
    ctx.stroke();

    // –ù–∏–∂–Ω—è—è –ø–æ–ª–æ–≤–∏–Ω–∞ - –≤–∏–¥ –¥–æ–±—ã—á–∏
    ctx.save();
    ctx.beginPath();
    ctx.rect(0, splitY, GAME_CONFIG.canvasWidth, splitY);
    ctx.clip();

    // –ù–∏–∂–Ω—è—è –∫–∞–º–µ—Ä–∞ –≤—Å–µ–≥–¥–∞ —Å–ª–µ–¥—É–µ—Ç –∑–∞ –¥–æ–±—ã—á–µ–π
    if (preyPlayer && typeof preyPlayer.x === 'number' && typeof preyPlayer.y === 'number') {
        const offsetX2 = preyPlayer.x - GAME_CONFIG.canvasWidth / 2;
        const offsetY2 = preyPlayer.y - splitY / 2 - splitY;

        // üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ—Ç—Ä–∏—Å–æ–≤–∫—É —Ñ–æ–Ω–∞
        drawOptimizedBackground(ctx, offsetX2, offsetY2);
        drawMaze(ctx, offsetX2, offsetY2);
        
        // üöÄ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –±—É—Å—Ç–µ—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –≤–∏–¥–∏–º—ã–µ)
        boosters.forEach(booster => {
            const boosterX = booster.x - offsetX2;
            const boosterY = booster.y - offsetY2;
            if (boosterX > -100 && boosterX < GAME_CONFIG.canvasWidth + 100 &&
                boosterY > splitY - 100 && boosterY < GAME_CONFIG.canvasHeight + 100) {
                drawBooster(ctx, booster, offsetX2, offsetY2);
            }
        });
        
        // üöÄ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ —á–∞—Å—Ç–∏—Ü (—Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –≤–∏–¥–∏–º—ã–µ)
        particles.filter(p => p.active).forEach(particle => {
            const particleX = particle.x - offsetX2;
            const particleY = particle.y - offsetY2;
            if (particleX > -50 && particleX < GAME_CONFIG.canvasWidth + 50 &&
                particleY > splitY - 50 && particleY < GAME_CONFIG.canvasHeight + 50) {
                particle.draw(ctx, offsetX2, offsetY2);
            }
        });
        
        if (hunterPlayer) drawPlayer(ctx, hunterPlayer, offsetX2, offsetY2);
        if (preyPlayer) drawPlayer(ctx, preyPlayer, offsetX2, offsetY2);
    }
    ctx.restore();

    // üöÄ –ú–∏–Ω–∏–∫–∞—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Ä–µ–∂–µ
    if (gameState.mode === 'playing' && frameCount % 3 === 0) {
        drawMinimap();
    }
    
    // üöÄ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ FPS
    if (gameState.mode === 'playing') {
        drawFPSCounter();
    }
    
    // üé® –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ –≥—Ä–∞—Ñ–∏–∫–∏
    drawGraphicsNotification();
}

// ===============================
// –£–ü–†–ê–í–õ–ï–ù–ò–ï –ò–ì–†–û–ô
// ===============================

function startGame() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –≤—ã–±—Ä–∞–Ω—ã
    if (!characterSelection.hunter || !characterSelection.prey) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –æ–±–µ–∏—Ö —Ä–æ–ª–µ–π!');
        return;
    }
    
    document.getElementById('startScreen').classList.add('hide');
    gameState.mode = 'playing';
    gameState.startTime = Date.now();
    gameState.gameTime = 0;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const gameContainer = document.querySelector('.game-container');
    if (gameContainer) {
        gameContainer.classList.remove('start-screen-active');
        gameContainer.classList.add('game-active');
    }

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω—ã
    document.querySelectorAll('.cooldown-indicator').forEach(el => {
        el.style.display = 'block';
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
    setTimeout(() => {
        updateCooldownLabels();
        // Debug: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞—Å—Å—ã
        console.log('Game started, container classes:', gameContainer.className);
    }, 100);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –±—É—Å—Ç–µ—Ä–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è —Ç–∞–∫, —á—Ç–æ–±—ã –ø–µ—Ä–≤—ã–π –±—É—Å—Ç–µ—Ä –ø–æ—è–≤–∏–ª—Å—è –ø–æ—Å–ª–µ initialBoosterDelay
    GAME_CONFIG.lastBoosterSpawnTime = Date.now() - GAME_CONFIG.minBoosterInterval + GAME_CONFIG.initialBoosterDelay;
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–≥—Ä–æ–∫–æ–≤
    playerConfig = getPlayerConfig();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–µ–π
    showRoleIndicators();
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã
    hideControlsInfo();
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
    generateMaze();
    
    // –°–ª—É—á–∞–π–Ω—ã–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤
    function getRandomSpawnPoint() {
        let x, y;
        const margin = 100; // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –æ—Ç—Å—Ç—É–ø –æ—Ç –≥—Ä–∞–Ω–∏—Ü
        let attempts = 0;
        
        do {
            x = Math.random() * (GAME_CONFIG.worldWidth - 2 * margin) + margin;
            y = Math.random() * (GAME_CONFIG.worldHeight - 2 * margin) + margin;
            attempts++;
        } while (checkWallCollision({x: x, y: y, width: 35, height: 40}, x, y) && attempts < 100);
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã
        if (attempts >= 100) {
            x = GAME_CONFIG.worldWidth / 2;
            y = GAME_CONFIG.worldHeight / 2;
        }
        
        return {x, y};
    }
    
    // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —á—Ç–æ –∏–≥—Ä–æ–∫–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è –Ω–∞ —Ä–∞–∑—É–º–Ω–æ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞
    const hunterSpawn = getRandomSpawnPoint();
    let preySpawn;
    do {
        preySpawn = getRandomSpawnPoint();
    } while (Math.hypot(preySpawn.x - hunterSpawn.x, preySpawn.y - hunterSpawn.y) < 300);
    
    // –†–∞–∑–º–µ—â–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if (playerConfig.hunter.character === 'punk') {
        players.punk.x = hunterSpawn.x;
        players.punk.y = hunterSpawn.y;
    } else if (playerConfig.hunter.character === 'businessman') {
        players.businessman.x = hunterSpawn.x;
        players.businessman.y = hunterSpawn.y;
    } else if (playerConfig.hunter.character === 'kok') {
        players.kok.x = hunterSpawn.x;
        players.kok.y = hunterSpawn.y;
    } else if (playerConfig.hunter.character === 'maks') {
        players.maks.x = hunterSpawn.x;
        players.maks.y = hunterSpawn.y;
    }
    
    if (playerConfig.prey.character === 'punk') {
        players.punk.x = preySpawn.x;
        players.punk.y = preySpawn.y;
    } else if (playerConfig.prey.character === 'businessman') {
        players.businessman.x = preySpawn.x;
        players.businessman.y = preySpawn.y;
    } else if (playerConfig.prey.character === 'kok') {
        players.kok.x = preySpawn.x;
        players.kok.y = preySpawn.y;
    } else if (playerConfig.prey.character === 'maks') {
        players.maks.x = preySpawn.x;
        players.maks.y = preySpawn.y;
    }
    
    // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–ø–∏–∏ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    if (playerConfig.hunter.character === 'punk') {
        hunterPlayer = createPlayerCopy(players.punk, 'punk');
        hunterPlayer.x = hunterSpawn.x;
        hunterPlayer.y = hunterSpawn.y;
    } else if (playerConfig.hunter.character === 'businessman') {
        hunterPlayer = createPlayerCopy(players.businessman, 'businessman');
        hunterPlayer.x = hunterSpawn.x;
        hunterPlayer.y = hunterSpawn.y;
    } else if (playerConfig.hunter.character === 'kok') {
        hunterPlayer = createPlayerCopy(players.kok, 'kok');
        hunterPlayer.x = hunterSpawn.x;
        hunterPlayer.y = hunterSpawn.y;
    } else if (playerConfig.hunter.character === 'maks') {
        hunterPlayer = createPlayerCopy(players.maks, 'maks');
        hunterPlayer.x = hunterSpawn.x;
        hunterPlayer.y = hunterSpawn.y;
    }
    
    if (playerConfig.prey.character === 'punk') {
        preyPlayer = createPlayerCopy(players.punk, 'punk');
        preyPlayer.x = preySpawn.x;
        preyPlayer.y = preySpawn.y;
    } else if (playerConfig.prey.character === 'businessman') {
        preyPlayer = createPlayerCopy(players.businessman, 'businessman');
        preyPlayer.x = preySpawn.x;
        preyPlayer.y = preySpawn.y;
    } else if (playerConfig.prey.character === 'kok') {
        preyPlayer = createPlayerCopy(players.kok, 'kok');
        preyPlayer.x = preySpawn.x;
        preyPlayer.y = preySpawn.y;
    } else if (playerConfig.prey.character === 'maks') {
        preyPlayer = createPlayerCopy(players.maks, 'maks');
        preyPlayer.x = preySpawn.x;
        preyPlayer.y = preySpawn.y;
    }
    
    // –û—á–∏—Å—Ç–∫–∞ –±—É—Å—Ç–µ—Ä–æ–≤ –∏ —á–∞—Å—Ç–∏—Ü
    boosters = [];
    particles = [];
    
    // –û—á–∏—Å—Ç–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –¥–ª—è –Ω–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    if (hunterPlayer) {
        hunterPlayer.boosts.clear();
        hunterPlayer.trail = [];
        hunterPlayer.ghostCooldown = 0;
        hunterPlayer.actionPressed = false;
    }
    
    if (preyPlayer) {
        preyPlayer.boosts.clear();
        preyPlayer.trail = [];
        preyPlayer.ghostCooldown = 0;
        preyPlayer.actionPressed = false;
    }
    
    // –°—Ç–∞—Ä—Ç–æ–≤—ã–µ –±—É—Å—Ç–µ—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –ø—Ä–∏–∑—Ä–∞–∫ - —Ç–µ–ø–µ—Ä—å –æ–Ω –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –±—É—Å—Ç–µ—Ä–æ–≤
    for (let i = 0; i < 5; i++) {
        spawnBooster();
    }
    
    playBackgroundMusic();
}

function endGame(winner) {
    stopBackgroundMusic();
    gameState.mode = 'ended';
    gameState.winner = winner;

    // –°–∫—Ä—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∏–≥—Ä—ã
    const gameContainer = document.querySelector('.game-container');
    if (gameContainer) {
        gameContainer.classList.remove('game-active');
    }

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω—ã
    document.querySelectorAll('.cooldown-indicator').forEach(el => {
        el.style.display = 'none';
    });
    
    // –°–∫—Ä—ã–≤–∞–µ–º –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–µ–π
    hideRoleIndicators();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
    showControlsInfo();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—Ç–æ –ø–æ–±–µ–¥–∏–ª
    const hunterCharacter = characterSelection.hunter;
    const preyCharacter = characterSelection.prey;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç
    if (winner === 'hunter') {
        gameState.scores.hunter = (gameState.scores.hunter || 0) + 1;
    } else {
        gameState.scores.prey = (gameState.scores.prey || 0) + 1;
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –º—É–∑—ã–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ç–æ –ø–æ–±–µ–¥–∏–ª –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–∂—É, –∞ –Ω–µ –ø–æ —Ä–æ–ª–∏
    let winningCharacter = null;
    if (winner === 'hunter') {
        winningCharacter = hunterCharacter; // –ü–µ—Ä—Å–æ–Ω–∞–∂ –æ—Ö–æ—Ç–Ω–∏–∫–∞
    } else {
        winningCharacter = preyCharacter; // –ü–µ—Ä—Å–æ–Ω–∞–∂ –¥–æ–±—ã—á–∏
    }
    
    // –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∑–≤—É–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    if (winningCharacter === 'punk') {
        // –°–∞–Ω—è –ø–æ–±–µ–¥–∏–ª - –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∑–≤—É–∫ –ø–æ–±–µ–¥—ã –æ—Ö–æ—Ç–Ω–∏–∫–∞
        playMusic('victory');
    } else if (winningCharacter === 'businessman') {
        // –õ–µ—Ö–∞ –ø–æ–±–µ–¥–∏–ª - –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∑–≤—É–∫ –ø–æ–±–µ–¥—ã –¥–æ–±—ã—á–∏
        playMusic('defeat');
    } else if (winningCharacter === 'kok') {
        // –°—Ç–µ–ø–∞ –ö–æ–∫ –ø–æ–±–µ–¥–∏–ª - –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –µ–≥–æ –ø–æ–±–µ–¥–Ω—ã–π –∑–≤—É–∫
        const kokEndSound = document.getElementById('kokEndSound');
        if (kokEndSound) {
            kokEndSound.currentTime = 0;
            kokEndSound.play();
        }
    } else if (winningCharacter === 'maks') {
        // –ú–∞–∫—Å –ó–¥–æ—Ä–æ–≤—ã–π –ø–æ–±–µ–¥–∏–ª - –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –µ–≥–æ –∑–≤—É–∫
        const maksSound = document.getElementById('maksSound');
        if (maksSound) {
            maksSound.currentTime = 0;
            maksSound.play();
        }
    }
    
    const endScreen = document.getElementById('endScreen');
    const winnerText = document.getElementById('winnerText');
    const gameResult = document.getElementById('gameResult');
    
    // –°–æ–∑–¥–∞–µ–º canvas –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –ª–∏—Ü–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    const winnerFaceCanvas = document.createElement('canvas');
    winnerFaceCanvas.className = 'evil-face';
    winnerFaceCanvas.width = 200;
    winnerFaceCanvas.height = 200;
    winnerFaceCanvas.style.width = '200px';
    winnerFaceCanvas.style.height = '200px';
    
    const faceCtx = winnerFaceCanvas.getContext('2d');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    if (winner === 'hunter') {
        const hunterName = hunterCharacter === 'punk' ? '–°–∞–Ω—è' : 
                          hunterCharacter === 'businessman' ? '–õ–µ—Ö–∞' : 
                          hunterCharacter === 'kok' ? '–°—Ç–µ–ø–∞' : '–ú–∞–∫—Å';
        const preyName = preyCharacter === 'punk' ? '–°–∞–Ω—è' : 
                        preyCharacter === 'businessman' ? '–õ–µ—Ö–∞' : 
                        preyCharacter === 'kok' ? '–°—Ç–µ–ø–∞' : '–ú–∞–∫—Å';
        winnerText.textContent = `üéØ –û–•–û–¢–ù–ò–ö –ü–û–ë–ï–î–ò–õ –†–ê–£–ù–î!`;
        winnerText.style.color = '#00ff88';
        gameResult.textContent = `${hunterName} –ø–æ–π–º–∞–ª ${preyName} –∑–∞ ${Math.floor(gameState.gameTime / 1000)} —Å–µ–∫—É–Ω–¥!`;
        gameResult.innerHTML += `<br>–°—á–µ—Ç: –û—Ö–æ—Ç–Ω–∏–∫ ${gameState.scores.hunter || 0} - ${gameState.scores.prey || 0} –î–æ–±—ã—á–∞`;
        
        if (hunterCharacter === 'punk') {
            drawPunkWinnerFace(faceCtx);
            winnerFaceCanvas.style.filter = 'drop-shadow(0 0 30px #ff4757)';
        } else if (hunterCharacter === 'businessman') {
            drawBusinessmanWinnerFace(faceCtx);
            winnerFaceCanvas.style.filter = 'drop-shadow(0 0 30px #3742fa)';
        } else if (hunterCharacter === 'kok') {
            drawKokWinnerFace(faceCtx); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏—Ü–æ –°—Ç–µ–ø—ã –ö–æ–∫
            winnerFaceCanvas.style.filter = 'drop-shadow(0 0 30px #00ff88)';
        } else if (hunterCharacter === 'maks') {
            drawMaksWinnerFace(faceCtx); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏—Ü–æ –ú–∞–∫—Å–∞ –ó–¥–æ—Ä–æ–≤–æ–≥–æ
            winnerFaceCanvas.style.filter = 'drop-shadow(0 0 30px #ffd700)';
        }
    } else {
        const hunterName = hunterCharacter === 'punk' ? '–°–∞–Ω—è' : 
                          hunterCharacter === 'businessman' ? '–õ–µ—Ö–∞' : 
                          hunterCharacter === 'kok' ? '–°—Ç–µ–ø–∞' : '–ú–∞–∫—Å';
        const preyName = preyCharacter === 'punk' ? '–°–∞–Ω—è' : 
                        preyCharacter === 'businessman' ? '–õ–µ—Ö–∞' : 
                        preyCharacter === 'kok' ? '–°—Ç–µ–ø–∞' : '–ú–∞–∫—Å';
        winnerText.textContent = `üèÉ‚Äç‚ôÇÔ∏è –î–û–ë–´–ß–ê –í–´–ñ–ò–õ–ê –í –†–ê–£–ù–î–ï!`;
        winnerText.style.color = '#ff6b35';
        gameResult.textContent = `${preyName} —É—Å–ø–µ—à–Ω–æ —É–±–µ–≥–∞–ª –æ—Ç ${hunterName} —Ü–µ–ª—ã—Ö 2 –º–∏–Ω—É—Ç—ã!`;
        gameResult.innerHTML += `<br>–°—á–µ—Ç: –û—Ö–æ—Ç–Ω–∏–∫ ${gameState.scores.hunter || 0} - ${gameState.scores.prey || 0} –î–æ–±—ã—á–∞`;
        
        if (preyCharacter === 'punk') {
            drawPunkWinnerFace(faceCtx);
            winnerFaceCanvas.style.filter = 'drop-shadow(0 0 30px #ff4757)';
        } else if (preyCharacter === 'businessman') {
            drawBusinessmanWinnerFace(faceCtx);
            winnerFaceCanvas.style.filter = 'drop-shadow(0 0 30px #3742fa)';
        } else if (preyCharacter === 'kok') {
            drawKokWinnerFace(faceCtx);
            winnerFaceCanvas.style.filter = 'drop-shadow(0 0 30px #00ff88)';
        } else if (preyCharacter === 'maks') {
            drawMaksWinnerFace(faceCtx);
            winnerFaceCanvas.style.filter = 'drop-shadow(0 0 30px #ffd700)';
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ª–∏ –∏–≥—Ä–∞
    if (gameState.roundNumber >= GAME_CONFIG.totalRounds) {
        const finalWinner = (gameState.scores.hunter || 0) > (gameState.scores.prey || 0) ? 'hunter' : 'prey';
        winnerText.textContent = finalWinner === 'hunter' ? 'üèÜ –û–•–û–¢–ù–ò–ö –í–´–ò–ì–†–ê–õ –ò–ì–†–£!' : 'üèÜ –î–û–ë–´–ß–ê –í–´–ò–ì–†–ê–õ–ê –ò–ì–†–£!';
        gameResult.innerHTML = `–§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç: –û—Ö–æ—Ç–Ω–∏–∫ ${gameState.scores.hunter || 0} - ${gameState.scores.prey || 0} –î–æ–±—ã—á–∞`;
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–≤–∞–Ω—à–∞ —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Ü–µ –∏–≥—Ä—ã
        document.querySelector('button[onclick="nextRound()"]').style.display = 'none';
    } else {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–≤–∞–Ω—à–∞ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–∞—É–Ω–¥–æ–≤
        document.querySelector('button[onclick="nextRound()"]').style.display = 'block';
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ª–∏—Ü–æ –∫ —ç–∫—Ä–∞–Ω—É
    document.body.appendChild(winnerFaceCanvas);
    
    // –£–¥–∞–ª—è–µ–º –ª–∏—Ü–æ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        if (winnerFaceCanvas.parentNode) {
            winnerFaceCanvas.parentNode.removeChild(winnerFaceCanvas);
        }
    }, 3000);
    
    endScreen.classList.remove('hide');
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã—Ö —á–∞—Å—Ç–∏—Ü
    for (let i = 0; i < 100; i++) {
        const color = winner === 'hunter' ? '#00ff88' : '#ff6b35';
        createOptimizedParticles(
            Math.random() * GAME_CONFIG.worldWidth,
            Math.random() * GAME_CONFIG.worldHeight,
            color,
            1
        );
    }
}

function nextRound() {
    document.getElementById('endScreen').classList.add('hide');
    gameState.roundNumber++;
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º —Ä–∞—É–Ω–¥–æ–º
    hideControlsInfo();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–Ω–æ–≤–∞
    const gameContainer = document.querySelector('.game-container');
    if (gameContainer) {
        gameContainer.classList.add('game-active');
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥ —Å —Ç–µ–º–∏ –∂–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏ (—Ä–µ–≤–∞–Ω—à)
    startGame();
}

function restartGame() {
    stopBackgroundMusic();
    document.getElementById('endScreen').classList.add('hide');
    gameState.roundNumber = 1;
    gameState.scores = { hunter: 0, prey: 0 }; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç
    document.querySelector('button[onclick="nextRound()"]').style.display = 'block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    characterSelection.hunter = null;
    characterSelection.prey = null;
    
    // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    document.querySelectorAll('.character-option').forEach(option => {
        option.classList.remove('selected');
    });
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    document.getElementById('startScreen').classList.remove('hide');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ —Å—Ç–∞—Ä—Ç–∞
    showControlsInfo();
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const gameContainer = document.querySelector('.game-container');
    if (gameContainer) {
        gameContainer.classList.add('start-screen-active');
        gameContainer.classList.remove('game-active');
        // Debug: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞—Å—Å—ã
        console.log('Game restarted, container classes:', gameContainer.className);
    }

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω—ã
    document.querySelectorAll('.cooldown-indicator').forEach(el => {
        el.style.display = 'none';
    });
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    gameState.mode = 'start';
    playerConfig = null;
    hunterPlayer = null;
    preyPlayer = null;
    
    // –û—á–∏—â–∞–µ–º –±—É—Å—Ç–µ—Ä—ã –∏ —á–∞—Å—Ç–∏—Ü—ã
    boosters = [];
    particles = [];
}

// ===============================
// –õ–ò–¶–ê –ü–û–ë–ï–î–ò–¢–ï–õ–ï–ô
// ===============================

function drawPunkWinnerFace(ctx) {
    const centerX = 100, centerY = 100;
    
    // –õ–∏—Ü–æ
    ctx.fillStyle = '#feca57';
    ctx.fillRect(centerX - 40, centerY - 35, 80, 70);
    
    // –ò—Ä–æ–∫–µ–∑
    ctx.fillStyle = '#ff6b7a';
    ctx.fillRect(centerX - 20, centerY - 60, 40, 30);
    
    // –ì–ª–∞–∑–∞
    ctx.fillStyle = '#2c2c54';
    ctx.fillRect(centerX - 25, centerY - 20, 8, 12);
    ctx.fillRect(centerX + 17, centerY - 20, 8, 12);
    
    // –£–ª—ã–±–∫–∞
    ctx.fillRect(centerX - 20, centerY + 5, 40, 8);
    
    // –ö—É—Ä—Ç–∫–∞
    ctx.fillStyle = '#1e3799';
    ctx.fillRect(centerX - 45, centerY + 35, 90, 50);
}

function drawBusinessmanWinnerFace(ctx) {
    const centerX = 100, centerY = 100;
    
    // –õ–∏—Ü–æ
    ctx.fillStyle = '#f8c291';
    ctx.fillRect(centerX - 35, centerY - 30, 70, 60);
    
    // –í–æ–ª–æ—Å—ã
    ctx.fillStyle = '#2c2c54';
    ctx.fillRect(centerX - 35, centerY - 45, 70, 20);
    
    // –ì–ª–∞–∑–∞
    ctx.fillRect(centerX - 20, centerY - 15, 6, 8);
    ctx.fillRect(centerX + 14, centerY - 15, 6, 8);
    
    // –£–ª—ã–±–∫–∞
    ctx.fillRect(centerX - 15, centerY + 5, 30, 6);
    
    // –ö–æ—Å—Ç—é–º
    ctx.fillRect(centerX - 40, centerY + 35, 80, 50);
    
    // –ì–∞–ª—Å—Ç—É–∫
    ctx.fillStyle = '#ff4757';
    ctx.fillRect(centerX - 8, centerY + 30, 16, 40);
}

function drawKokWinnerFace(ctx) {
    const centerX = 100, centerY = 100;
    
    // –õ–∏—Ü–æ
    ctx.fillStyle = '#feca57';
    ctx.fillRect(centerX - 35, centerY - 30, 70, 60);
    
    // –í–æ–ª–Ω–∏—Å—Ç—ã–µ –≤–æ–ª–æ—Å—ã
    ctx.fillStyle = '#8b4513';
    ctx.beginPath();
    ctx.arc(centerX - 20, centerY - 45, 8, 0, Math.PI * 2);
    ctx.arc(centerX - 8, centerY - 48, 7, 0, Math.PI * 2);
    ctx.arc(centerX + 4, centerY - 47, 8, 0, Math.PI * 2);
    ctx.arc(centerX + 16, centerY - 44, 7, 0, Math.PI * 2);
    ctx.fill();
    
    // –ó–µ–ª–µ–Ω—ã–µ –≥–ª–∞–∑–∞
    ctx.fillStyle = '#00ff00';
    ctx.fillRect(centerX - 20, centerY - 15, 6, 8);
    ctx.fillRect(centerX + 14, centerY - 15, 6, 8);
    
    // –£–ª—ã–±–∫–∞
    ctx.fillStyle = '#e74c3c';
    ctx.fillRect(centerX - 15, centerY + 5, 30, 6);
    
    // –¢–µ–º–Ω–æ-—Å–µ—Ä–∞—è –∫–æ—Ñ—Ç–∞
    ctx.fillStyle = '#4a4a4a';
    ctx.fillRect(centerX - 40, centerY + 35, 80, 50);
    
    // –¶–µ–ø–æ—á–∫–∞
    ctx.strokeStyle = '#ffd700';
    ctx.lineWidth = 3;
    ctx.beginPath();
    ctx.arc(centerX, centerY + 10, 12, 0, Math.PI * 2);
    ctx.stroke();
    ctx.fillStyle = '#ffd700';
    ctx.fillRect(centerX - 3, centerY + 8, 6, 8);
}

function drawMaksWinnerFace(ctx) {
    const centerX = 100, centerY = 100;
    
    // –õ–∏—Ü–æ
    ctx.fillStyle = '#feca57';
    ctx.fillRect(centerX - 40, centerY - 30, 80, 60);
    
    // –°–≤–µ—Ç–ª–æ-—Ä—É—Å—ã–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –≤–æ–ª–æ—Å—ã
    ctx.fillStyle = '#d4af37';
    ctx.fillRect(centerX - 40, centerY - 40, 80, 15);
    
    // –ì–æ–ª—É–±—ã–µ –≥–ª–∞–∑–∞
    ctx.fillStyle = '#87ceeb';
    ctx.fillRect(centerX - 25, centerY - 15, 8, 10);
    ctx.fillRect(centerX + 17, centerY - 15, 8, 10);
    
    // –ú–∞—Å—Å–∏–≤–Ω–∞—è —á–µ–ª—é—Å—Ç—å
    ctx.fillStyle = '#feca57';
    ctx.fillRect(centerX - 30, centerY + 5, 60, 8);
    
    // –£–ª—ã–±–∫–∞
    ctx.fillStyle = '#e74c3c';
    ctx.fillRect(centerX - 20, centerY + 15, 40, 4);
    
    // –¢–µ–º–Ω–æ-—Å–∏–Ω—è—è –∫–æ—Ñ—Ç–∞
    ctx.fillStyle = '#1e3a8a';
    ctx.fillRect(centerX - 45, centerY + 35, 90, 50);
    
    // –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–µ —Ç—Ä–µ–Ω–∏–∫–∏
    ctx.fillStyle = '#c0c0c0';
    ctx.fillRect(centerX - 35, centerY + 85, 30, 25);
    ctx.fillRect(centerX + 5, centerY + 85, 30, 25);
    
    // –ë–µ–ª—ã–µ –∫—Ä–æ—Å—ã
    ctx.fillStyle = '#ffffff';
    ctx.fillRect(centerX - 40, centerY + 110, 40, 6);
    ctx.fillRect(centerX, centerY + 110, 40, 6);
}

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
requestAnimationFrame(gameLoop);

// –ò–∑–º–µ–Ω—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∂–∏–º–∞ –ø—Ä–∏–∑—Ä–∞–∫–∞ —Å 5 —Å–µ–∫—É–Ω–¥ –Ω–∞ 1 —Å–µ–∫—É–Ω–¥—É
if (gameState.businessmanGhostMode && Date.now() - gameState.businessmanGhostModeStart > 1000) {
    gameState.businessmanGhostMode = false;
}

// ===============================
// –í–´–ë–û–† –ü–ï–†–°–û–ù–ê–ñ–ï–ô
// ===============================

function selectCharacter(role, character) {
    // –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∑–≤—É–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    if (character === 'punk') {
        // –ó–≤—É–∫ –¥–ª—è –°–∞–Ω–∏
        const sanyaSound = document.getElementById('sanyaSound');
        if (sanyaSound) {
            sanyaSound.currentTime = 0;
            sanyaSound.play();
        }
    } else if (character === 'businessman') {
        // –ó–≤—É–∫ –¥–ª—è –õ–µ—Ö–∏
        const lehaSound = document.getElementById('lehaSound');
        if (lehaSound) {
            lehaSound.currentTime = 0;
            lehaSound.play();
        }
    } else if (character === 'kok') {
        // –ó–≤—É–∫ –¥–ª—è –°—Ç–µ–ø—ã –ö–æ–∫
        const kokSound = document.getElementById('kokSound');
        if (kokSound) {
            kokSound.currentTime = 0;
            kokSound.play();
        }
    } else if (character === 'maks') {
        // –ó–≤—É–∫ –¥–ª—è –ú–∞–∫—Å–∞ –ó–¥–æ—Ä–æ–≤–æ–≥–æ
        const maksSound = document.getElementById('maksSound');
        if (maksSound) {
            maksSound.currentTime = 0;
            maksSound.play();
        }
    }
    
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤—ã–±–æ—Ä –¥–ª—è —ç—Ç–æ–π —Ä–æ–ª–∏
    const roleSections = document.querySelectorAll('.role-section');
    roleSections.forEach(section => {
        const options = section.querySelectorAll('.character-option');
        options.forEach(option => {
            if (option.onclick && option.onclick.toString().includes(role)) {
                option.classList.remove('selected');
            }
        });
    });
    
    // –í—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂
    characterSelection[role] = character;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
    const selectedOption = document.querySelector(`.character-option[onclick*="${role}"][onclick*="${character}"]`);
    if (selectedOption) {
        selectedOption.classList.add('selected');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
    updateControlsInfo();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ä—Ç–∞
    checkStartButton();
}

function checkStartButton() {
    const startButton = document.getElementById('startButton');
    if (characterSelection.hunter && characterSelection.prey) {
        startButton.classList.add('active');
    } else {
        startButton.classList.remove('active');
    }
}

function getPlayerConfig() {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—Ç–æ –∑–∞ –∫–æ–≥–æ –∏–≥—Ä–∞–µ—Ç
    const hunterCharacter = characterSelection.hunter;
    const preyCharacter = characterSelection.prey;
    
    // üéÆ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è
    const wasdControls = {
        up: 'KeyW',
        down: 'KeyS',
        left: 'KeyA',
        right: 'KeyD',
        action: 'KeyE'
    };
    
    const arrowControls = {
        up: 'ArrowUp',
        down: 'ArrowDown',
        left: 'ArrowLeft',
        right: 'ArrowRight',
        action: 'Slash'
    };
    
    let hunterControls, preyControls;
    
    if (GAME_CONFIG.controlsSwapped) {
        // –ü–æ–º–µ–Ω—è–Ω–æ: –æ—Ö–æ—Ç–Ω–∏–∫ —Å—Ç—Ä–µ–ª–æ—á–∫–∏, –¥–æ–±—ã—á–∞ WASD
        hunterControls = arrowControls;
        preyControls = wasdControls;
    } else {
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ: –æ—Ö–æ—Ç–Ω–∏–∫ WASD, –¥–æ–±—ã—á–∞ —Å—Ç—Ä–µ–ª–æ—á–∫–∏
        hunterControls = wasdControls;
        preyControls = arrowControls;
    }
    
    return {
        hunter: {
            character: hunterCharacter,
            controls: hunterControls,
            isPunk: hunterCharacter === 'punk'
        },
        prey: {
            character: preyCharacter,
            controls: preyControls,
            isPunk: preyCharacter === 'punk'
        }
    };
}

// ===============================
// –£–ü–†–ê–í–õ–ï–ù–ò–ï –û–ë–û–ó–ù–ê–ß–ï–ù–ò–Ø–ú–ò –†–û–õ–ï–ô
// ===============================

function showRoleIndicators() {
    if (playerConfig) {
        const hunterName = playerConfig.hunter.character === 'punk' ? '–°–∞–Ω—è' : 
                          playerConfig.hunter.character === 'businessman' ? '–õ–µ—Ö–∞' : 
                          playerConfig.hunter.character === 'kok' ? '–°—Ç–µ–ø–∞' : '–ú–∞–∫—Å';
        const preyName = playerConfig.prey.character === 'punk' ? '–°–∞–Ω—è' : 
                        playerConfig.prey.character === 'businessman' ? '–õ–µ—Ö–∞' : 
                        playerConfig.prey.character === 'kok' ? '–°—Ç–µ–ø–∞' : '–ú–∞–∫—Å';
        
        toggleUI('hunterIndicator', true);
        toggleUI('preyIndicator', true);
        
        const hunterIndicator = document.getElementById('hunterIndicator');
        const preyIndicator = document.getElementById('preyIndicator');
        
        if (hunterIndicator) hunterIndicator.textContent = `üéØ –û–•–û–¢–ù–ò–ö - ${hunterName}`;
        if (preyIndicator) preyIndicator.textContent = `üèÉ‚Äç‚ôÇÔ∏è –î–û–ë–´–ß–ê - ${preyName}`;
    }
}

function hideRoleIndicators() {
    toggleUI('hunterIndicator', false);
    toggleUI('preyIndicator', false);
}

// ===============================
// –£–ü–†–ê–í–õ–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ï–ô –û–ë –£–ü–†–ê–í–õ–ï–ù–ò–ò
// ===============================

function showControlsInfo() {
    const controlsInfo = document.querySelector('.game-controls-info');
    if (controlsInfo) controlsInfo.style.display = 'block';
}

function hideControlsInfo() {
    const controlsInfo = document.querySelector('.game-controls-info');
    if (controlsInfo) controlsInfo.style.display = 'none';
}

function updateControlsInfo() {
    const hunterTitle = document.querySelector('.role-section:first-child .role-title');
    const preyTitle = document.querySelector('.role-section:last-child .role-title');
    const hunterCooldownLabel = document.querySelector('.hunter-cooldown-indicator .cooldown-label');
    const preyCooldownLabel = document.querySelector('.prey-cooldown-indicator .cooldown-label');
    
    if (!hunterTitle || !preyTitle) return;
    
    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è
    if (GAME_CONFIG.controlsSwapped) {
        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–º–µ–Ω—è–Ω—ã –º–µ—Å—Ç–∞–º–∏
        hunterTitle.textContent = 'üéØ –û–•–û–¢–ù–ò–ö: –°—Ç—Ä–µ–ª–æ—á–∫–∏ + /';
        preyTitle.textContent = 'üèÉ‚Äç‚ôÇÔ∏è –î–û–ë–´–ß–ê: WASD + E';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏ –ø–æ–¥–ø–∏—Å–∏ –∫—É–ª–¥–∞—É–Ω–æ–≤
        if (hunterCooldownLabel) hunterCooldownLabel.textContent = 'üéØ –û—Ö–æ—Ç–Ω–∏–∫ (/)';
        if (preyCooldownLabel) preyCooldownLabel.textContent = 'üèÉ‚Äç‚ôÇÔ∏è –î–æ–±—ã—á–∞ (E)';
    } else {
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        hunterTitle.textContent = 'üéØ –û–•–û–¢–ù–ò–ö: WASD + E';
        preyTitle.textContent = 'üèÉ‚Äç‚ôÇÔ∏è –î–û–ë–´–ß–ê: –°—Ç—Ä–µ–ª–æ—á–∫–∏ + /';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏ –ø–æ–¥–ø–∏—Å–∏ –∫—É–ª–¥–∞—É–Ω–æ–≤
        if (hunterCooldownLabel) hunterCooldownLabel.textContent = 'üéØ –û—Ö–æ—Ç–Ω–∏–∫ (E)';
        if (preyCooldownLabel) preyCooldownLabel.textContent = 'üèÉ‚Äç‚ôÇÔ∏è –î–æ–±—ã—á–∞ (/)';
    }
}

// ===============================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
// ===============================

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    // –°–∫—Ä—ã–≤–∞–µ–º –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–µ–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    hideRoleIndicators();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ —Å—Ç–∞—Ä—Ç–∞
    showControlsInfo();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
    updateControlsInfo();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≥—Ä–∞—Ñ–∏–∫–∏
    initGraphicsToggle();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ä—Ç–∞
    checkStartButton();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
    requestAnimationFrame(gameLoop);
});

// ===============================
// –°–û–ó–î–ê–ù–ò–ï –ö–û–ü–ò–ô –ò–ì–†–û–ö–û–í
// ===============================

function createPlayerCopy(originalPlayer, characterType) {
    return {
        x: originalPlayer.x,
        y: originalPlayer.y,
        width: originalPlayer.width,
        height: originalPlayer.height,
        speed: originalPlayer.speed,
        maxSpeed: originalPlayer.maxSpeed,
        acceleration: originalPlayer.acceleration,
        angle: originalPlayer.angle,
        isGhost: false,
        ghostCooldown: 0,
        actionPressed: false,
        boosts: new Map(),
        trail: [],
        lastSafeX: originalPlayer.x,
        lastSafeY: originalPlayer.y,
        characterType: characterType,
        // –°–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –≥–∏–≥–∞–Ω—Ç–∞
        originalWidth: originalPlayer.originalWidth || originalPlayer.width,
        originalHeight: originalPlayer.originalHeight || originalPlayer.height,
        giantScale: 1,
        giantAnimationTime: 0,
        isGiant: false,
        lastWallBreakTime: 0
    };
}

// ===============================
// UI –§–£–ù–ö–¶–ò–ò
// ===============================

function toggleUI(elementId, show) {
    const element = document.getElementById(elementId);
    if (element) {
        element.style.display = show ? 'block' : 'none';
    }
}

// ===============================
// –õ–û–ú–ê–ù–ò–ï –°–¢–ï–ù (–ì–ò–ì–ê–ù–¢)
// ===============================

function breakWalls(player) {
    const breakRadius = 80; // –†–∞–¥–∏—É—Å —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è —Å—Ç–µ–Ω
    const playerCenterX = player.x + player.width / 2;
    const playerCenterY = player.y + player.height / 2;
    
    // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–µ–Ω—ã –¥–ª—è —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è
    let wallsDestroyed = 0;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å—Ç–µ–Ω—ã –≤ —Ä–∞–¥–∏—É—Å–µ
    const wallsToRemove = [];
    for (let i = walls.length - 1; i >= 0; i--) {
        const wall = walls[i];
        const wallCenterX = wall.x + wall.width / 2;
        const wallCenterY = wall.y + wall.height / 2;
        
        const distance = Math.hypot(
            playerCenterX - wallCenterX,
            playerCenterY - wallCenterY
        );
        
        if (distance <= breakRadius) {
            // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è —Å—Ç–µ–Ω—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
            const colors = ['#8B4513', '#A0522D', '#CD853F', '#D2691E']; // –ö–æ—Ä–∏—á–Ω–µ–≤—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏
            const randomColor = colors[Math.floor(Math.random() * colors.length)];
            
            createOptimizedParticles(
                wallCenterX,
                wallCenterY,
                randomColor,
                15 + Math.random() * 10 // –°–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–∏—Ü
            );
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∑–æ–ª–æ—Ç—ã–µ –∏—Å–∫—Ä—ã
            createOptimizedParticles(
                wallCenterX,
                wallCenterY,
                '#FFD700',
                5 + Math.random() * 5
            );
            
            wallsToRemove.push(i);
            wallsDestroyed++;
        }
    }
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–µ–Ω—ã
    for (const index of wallsToRemove) {
        walls.splice(index, 1);
    }
    
    // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è –≤ —Ü–µ–Ω—Ç—Ä–µ –∏–≥—Ä–æ–∫–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞–∑—Ä—É—à–∏–ª–∏ —Å—Ç–µ–Ω—ã
    if (wallsDestroyed > 0) {
        createOptimizedParticles(
            playerCenterX,
            playerCenterY,
            BOOSTER_TYPES.giant.color,
            20
        );
    }
    
    return wallsDestroyed > 0;
}

// –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ–Ω–æ–≤—É—é –º—É–∑—ã–∫—É
function stopBackgroundMusic() {
    const music = document.getElementById('backgroundMusic');
    if (music) {
        music.pause();
        music.currentTime = 0;
    }
}

let lastTime = 0;
function gameLoop(currentTime) {
    const deltaTime = currentTime - lastTime;
    lastTime = currentTime;

    // üöÄ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
    adaptiveQualityControl(deltaTime);

    if (gameState.mode === 'playing' && playerConfig) {
        gameState.gameTime += deltaTime;

        // üåê –ú–£–õ–¨–¢–ò–ü–õ–ï–ï–†: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤
        if (isOnlineMode) {
            // –í –æ–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–æ–µ–≥–æ –∏–≥—Ä–æ–∫–∞
            const myPlayer = onlineGameState.gameRole === 'hunter' ? hunterPlayer : preyPlayer;
            const myControls = onlineGameState.gameRole === 'hunter' ? playerConfig.hunter.controls : playerConfig.prey.controls;
            const myCharacter = onlineGameState.gameRole === 'hunter' ? playerConfig.hunter.character : playerConfig.prey.character;
            
            if (myPlayer) {
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–≤–æ–¥
                const currentInput = {
                    up: keys[myControls.up] || false,
                    down: keys[myControls.down] || false,
                    left: keys[myControls.left] || false,
                    right: keys[myControls.right] || false,
                    action: keys[myControls.action] || false
                };
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–≤–æ–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–∫–∞–∂–¥—ã–µ 2 –∫–∞–¥—Ä–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏)
                if (frameCount % 2 === 0) {
                    sendPlayerInput(currentInput);
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ
                updatePlayer(myPlayer, myControls, deltaTime, myCharacter);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ)
                if (frameCount % 3 === 0) {
                    sendPlayerPosition(myPlayer);
                }
            }
        } else {
            // –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - –æ–±–Ω–æ–≤–ª—è–µ–º –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –∫–∞–∫ —Ä–∞–Ω—å—à–µ
            if (hunterPlayer) {
                updatePlayer(hunterPlayer, playerConfig.hunter.controls, deltaTime, playerConfig.hunter.character);
            }
            if (preyPlayer) {
                updatePlayer(preyPlayer, playerConfig.prey.controls, deltaTime, playerConfig.prey.character);
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—É—Å—Ç–µ—Ä–æ–≤
        if (hunterPlayer) checkBoosterCollisions(hunterPlayer);
        if (preyPlayer) checkBoosterCollisions(preyPlayer);

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—É—Å—Ç–µ—Ä–æ–≤
        updateBoosters(deltaTime);

        // –ë–æ–ª–µ–µ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –±—É—Å—Ç–µ—Ä–æ–≤ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ)
        if (frameCount % 30 === 0) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–µ 30 –∫–∞–¥—Ä–æ–≤
            const currentTimeMs = Date.now();
            const activeBoosters = boosters.filter(b => !b.collected).length;
            const gameTimeElapsed = currentTimeMs - gameState.startTime;
            const gameTimeSeconds = gameTimeElapsed / 1000;

            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –ø–æ—è–≤–ª–µ–Ω–∏—è –±—É—Å—Ç–µ—Ä–æ–≤ –ø–æ—Å–ª–µ 15 —Å–µ–∫—É–Ω–¥
            let currentMinInterval = GAME_CONFIG.minBoosterInterval;
            let currentMaxInterval = GAME_CONFIG.maxBoosterInterval;
            
            if (gameTimeSeconds > 15) {
                currentMinInterval = GAME_CONFIG.minBoosterInterval / 2;
                currentMaxInterval = GAME_CONFIG.maxBoosterInterval / 2;
            }

            if (activeBoosters < GAME_CONFIG.targetBoosterCount &&
                gameTimeElapsed > GAME_CONFIG.initialBoosterDelay &&
                currentTimeMs - GAME_CONFIG.lastBoosterSpawnTime > currentMinInterval) {

                const spawnInterval = currentMinInterval +
                    Math.random() * (currentMaxInterval - currentMinInterval);

                if (currentTimeMs - GAME_CONFIG.lastBoosterSpawnTime > spawnInterval) {
                    spawnBooster();
                    GAME_CONFIG.lastBoosterSpawnTime = currentTimeMs;
                }
            }
        }

        // üöÄ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Å—Ç–∏—Ü
        updateParticlesOptimized(deltaTime);

        // –û–±–Ω–æ–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è (—Ä–µ–∂–µ)
        if (frameCount % 10 === 0) {
            updateTensionEffects();
        }

        // üåê –ú–£–õ–¨–¢–ò–ü–õ–ï–ï–†: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã
        const distance = getDistanceBetweenPlayers();
        if (distance < GAME_CONFIG.catchDistance) {
            if (isOnlineMode) {
                sendGameEnd('hunter');
            } else {
                endGame('hunter');
            }
            return;
        } else if (gameState.gameTime > GAME_CONFIG.roundTime * 1000) {
            if (isOnlineMode) {
                sendGameEnd('prey');
            } else {
                endGame('prey');
            }
            return;
        }
    }

    // üöÄ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI (—Ä–µ–∂–µ)
    if (frameCount % 5 === 0) {
        updateUI(currentTime);
    }
    
    render();
    requestAnimationFrame(gameLoop);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    document.querySelectorAll('.cooldown-indicator').forEach(el => {
        el.style.display = 'none';
    });
});

// üöÄ –ü–ï–†–ï–ö–õ–Æ–ß–ê–¢–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ò –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π controlState (–æ–±—ä—è–≤–ª–µ–Ω –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞)

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
function toggleControls() {
    GAME_CONFIG.controlsSwapped = !GAME_CONFIG.controlsSwapped;
    
    // –í–∏–∑—É–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è
    updateControlToggleUI();
    
    // üéÆ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ
    updateControlsInfo();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–≥—Ä–æ–∫–æ–≤ –µ—Å–ª–∏ –∏–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞
    if (playerConfig) {
        updatePlayerControlConfig();
    }
    
    console.log(`–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ${GAME_CONFIG.controlsSwapped ? '–ø–æ–º–µ–Ω—è–Ω–æ' : '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ'}`);
}

function updateControlToggleUI() {
    const toggle = document.getElementById('controlToggle');
    
    if (GAME_CONFIG.controlsSwapped) {
        toggle.classList.add('swapped');
    } else {
        toggle.classList.remove('swapped');
    }
}

function updatePlayerControlConfig() {
    if (!playerConfig) return;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    const wasdControls = {
        up: 'KeyW',
        down: 'KeyS', 
        left: 'KeyA',
        right: 'KeyD',
        action: 'KeyE'
    };
    
    const arrowControls = {
        up: 'ArrowUp',
        down: 'ArrowDown',
        left: 'ArrowLeft', 
        right: 'ArrowRight',
        action: 'Slash'
    };
    
    if (GAME_CONFIG.controlsSwapped) {
        // –û—Ö–æ—Ç–Ω–∏–∫ –ø–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä–µ–ª–æ—á–∫–∏, –¥–æ–±—ã—á–∞ WASD
        playerConfig.hunter.controls = arrowControls;
        playerConfig.prey.controls = wasdControls;
    } else {
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ: –æ—Ö–æ—Ç–Ω–∏–∫ WASD, –¥–æ–±—ã—á–∞ —Å—Ç—Ä–µ–ª–æ—á–∫–∏
        playerConfig.hunter.controls = wasdControls;
        playerConfig.prey.controls = arrowControls;
    }
}

// üöÄ –ê–ì–†–ï–°–°–ò–í–ù–´–ï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –î–õ–Ø –ü–õ–ê–í–ù–û–°–¢–ò

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è FPS –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
let lastFrameTime = 0;
let frameCount = 0;
let currentFPS = 0;
let performanceMode = 'auto';

// –ö—ç—à–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
let backgroundCache = null;
let staticElementsCache = null;
let lastBackgroundUpdate = 0;

// –°–∏—Å—Ç–µ–º–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
function adaptiveQualityControl(deltaTime) {
    frameCount++;
    
    if (frameCount % 60 === 0) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 60 –∫–∞–¥—Ä–æ–≤
        currentFPS = Math.round(1000 / deltaTime);
        
        // –ê–¥–∞–ø—Ç–∏–≤–Ω–æ –º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        if (currentFPS < 40) {
            // –°–Ω–∏–∂–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ
            GAME_CONFIG.maxParticles = Math.max(10, GAME_CONFIG.maxParticles - 5);
            GAME_CONFIG.particleUpdateInterval = Math.min(5, GAME_CONFIG.particleUpdateInterval + 1);
            GAME_CONFIG.backgroundRedrawInterval = Math.min(8, GAME_CONFIG.backgroundRedrawInterval + 1);
            performanceMode = 'ultra-low';
        } else if (currentFPS > 80 && performanceMode === 'ultra-low') {
            // –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
            GAME_CONFIG.maxParticles = Math.min(100, GAME_CONFIG.maxParticles + 2);
            GAME_CONFIG.particleUpdateInterval = Math.max(1, GAME_CONFIG.particleUpdateInterval - 1);
            GAME_CONFIG.backgroundRedrawInterval = Math.max(2, GAME_CONFIG.backgroundRedrawInterval - 1);
            performanceMode = 'auto';
        }
    }
}

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ñ–æ–Ω–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
function drawOptimizedBackground(ctx, offsetX, offsetY) {
    const now = Date.now();
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à —Ñ–æ–Ω–∞ –µ—Å–ª–∏ –Ω–µ–¥–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–ª–∏
    if (backgroundCache && (now - lastBackgroundUpdate) < (1000 / GAME_CONFIG.backgroundRedrawInterval)) {
        ctx.drawImage(backgroundCache, 0, 0);
        return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫—ç—à –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!backgroundCache) {
        backgroundCache = document.createElement('canvas');
        backgroundCache.width = GAME_CONFIG.canvasWidth;
        backgroundCache.height = GAME_CONFIG.canvasHeight;
    }
    
    const bgCtx = backgroundCache.getContext('2d');
    
    // –†–∏—Å—É–µ–º —Ñ–æ–Ω –≤ –∫—ç—à
    const gradient = bgCtx.createRadialGradient(
        GAME_CONFIG.canvasWidth / 2, GAME_CONFIG.canvasHeight / 2, 0,
        GAME_CONFIG.canvasWidth / 2, GAME_CONFIG.canvasHeight / 2, GAME_CONFIG.canvasWidth
    );
    gradient.addColorStop(0, '#1a1a2e');
    gradient.addColorStop(0.5, '#16213e');
    gradient.addColorStop(1, '#0f0f23');
    
    bgCtx.fillStyle = gradient;
    bgCtx.fillRect(0, 0, GAME_CONFIG.canvasWidth, GAME_CONFIG.canvasHeight);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫—ç—à
    ctx.drawImage(backgroundCache, 0, 0);
    lastBackgroundUpdate = now;
}

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Å—Ç–∏—Ü
function updateParticlesOptimized(deltaTime) {
    let activeCount = 0;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—É—é N-—é —á–∞—Å—Ç–∏—Ü—É –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ CPU
    for (let i = particles.length - 1; i >= 0; i--) {
        if (i % GAME_CONFIG.particleUpdateInterval === 0 || activeCount < 10) {
            const particle = particles[i];
            particle.update(deltaTime);
            
            if (particle.life <= 0) {
                particles.splice(i, 1);
            } else {
                activeCount++;
            }
        }
    }
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–∏—Ü
    if (particles.length > GAME_CONFIG.maxParticles) {
        particles.splice(GAME_CONFIG.maxParticles);
    }
}

// –°—á–µ—Ç—á–∏–∫ FPS –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
function drawFPSCounter() {
    if (performanceMode === 'ultra-low') return; // –ù–µ —Ä–∏—Å—É–µ–º –≤ —É–ª—å—Ç—Ä–∞-—Ä–µ–∂–∏–º–µ
    
    ctx.save();
    ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';
    ctx.fillRect(5, 5, 80, 25);
    
    const color = currentFPS > 50 ? '#00ff88' : currentFPS > 30 ? '#ffaa00' : '#ff4757';
    ctx.fillStyle = color;
    ctx.font = '12px monospace';
    ctx.fillText(`FPS: ${currentFPS}`, 10, 20);
    ctx.restore();
}

// üé® –°–ò–°–¢–ï–ú–ê –ù–ê–°–¢–†–û–ï–ö –ì–†–ê–§–ò–ö–ò

function setGraphicsLevel(level) {
    if (!GRAPHICS_PRESETS[level]) return;
    
    const preset = GRAPHICS_PRESETS[level];
    GAME_CONFIG.graphicsLevel = level;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø—Ä–µ—Å–µ—Ç–∞
    GAME_CONFIG.targetFPS = preset.targetFPS;
    GAME_CONFIG.maxParticles = preset.maxParticles;
    GAME_CONFIG.particleUpdateInterval = preset.particleUpdateInterval;
    GAME_CONFIG.backgroundRedrawInterval = preset.backgroundRedrawInterval;
    
    // üöÄ –°–†–ê–ó–£ –ü–†–ò–ú–ï–ù–Ø–ï–ú –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ö –ò–ì–†–ï
    applyGraphicsChanges(level);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    updateGraphicsToggleUI();
    
    console.log(`–ö–∞—á–µ—Å—Ç–≤–æ –≥—Ä–∞—Ñ–∏–∫–∏: ${level} (${preset.maxParticles} —á–∞—Å—Ç–∏—Ü, ${preset.targetFPS} FPS)`);
}

function applyGraphicsChanges(level) {
    const preset = GRAPHICS_PRESETS[level];
    
    // üñ•Ô∏è –ò–ó–ú–ï–ù–Ø–ï–ú –†–ê–ó–†–ï–®–ï–ù–ò–ï CANVAS
    updateCanvasResolution(preset.resolutionScale);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–∏—Ü –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
    if (particles.length > preset.maxParticles) {
        particles.splice(preset.maxParticles);
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à —Ñ–æ–Ω–∞ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    backgroundCache = null;
    lastBackgroundUpdate = 0;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
    if (gameState.mode === 'playing') {
        createGraphicsChangeEffect(level);
    }
}

function updateCanvasResolution(scale) {
    // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ –§–ò–ó–ò–ß–ï–°–ö–ò–ï —Ä–∞–∑–º–µ—Ä—ã canvas (–¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞)
    const renderWidth = Math.floor(GAME_CONFIG.baseCanvasWidth * scale);
    const renderHeight = Math.floor(GAME_CONFIG.baseCanvasHeight * scale);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –§–ò–ó–ò–ß–ï–°–ö–ò–ï —Ä–∞–∑–º–µ—Ä—ã canvas (–≤–ª–∏—è–µ—Ç –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)
    canvas.width = renderWidth;
    canvas.height = renderHeight;
    
    // –ú–∏–Ω–∏–∫–∞—Ä—Ç–∞ –í–°–ï–ì–î–ê –æ—Å—Ç–∞–µ—Ç—Å—è –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    minimap.width = 234;
    minimap.height = 156;
    
    // –õ–û–ì–ò–ß–ï–°–ö–ò–ï —Ä–∞–∑–º–µ—Ä—ã –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º–∏ (—Ä–∞–∑–º–µ—Ä –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏)
    // –≠—Ç–æ –∑–Ω–∞—á–∏—Ç —á—Ç–æ –∏–≥—Ä–æ–∫ –≤–∏–¥–∏—Ç —Ç—É –∂–µ –æ–±–ª–∞—Å—Ç—å –∫–∞—Ä—Ç—ã, –Ω–æ –≤ –º–µ–Ω—å—à–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏
    GAME_CONFIG.canvasWidth = GAME_CONFIG.baseCanvasWidth;  // –í—Å–µ–≥–¥–∞ –ø–æ–ª–Ω—ã–π —Ä–∞–∑–º–µ—Ä!
    GAME_CONFIG.canvasHeight = GAME_CONFIG.baseCanvasHeight; // –í—Å–µ–≥–¥–∞ –ø–æ–ª–Ω—ã–π —Ä–∞–∑–º–µ—Ä!
    
    // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
    const scaleX = renderWidth / GAME_CONFIG.baseCanvasWidth;
    const scaleY = renderHeight / GAME_CONFIG.baseCanvasHeight;
    
    ctx.setTransform(scaleX, 0, 0, scaleY, 0, 0);
    // –ú–∏–Ω–∏–∫–∞—Ä—Ç–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    minimapCtx.setTransform(1, 0, 0, 1, 0, 0);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–∏
    if (scale < 1.0) {
        ctx.imageSmoothingEnabled = false; // –ü–∏–∫—Å–µ–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è –Ω–∏–∑–∫–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        canvas.classList.add('low-res');
    } else {
        ctx.imageSmoothingEnabled = true;  // –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        canvas.classList.remove('low-res');
    }
    
    // –ú–∏–Ω–∏–∫–∞—Ä—Ç–∞ –≤—Å–µ–≥–¥–∞ —Å —Ö–æ—Ä–æ—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
    minimapCtx.imageSmoothingEnabled = true;
    minimap.classList.remove('low-res');
    
    console.log(`–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ä–µ–Ω–¥–µ—Ä–∞: ${renderWidth}x${renderHeight} (${Math.round(scale * 100)}%), –æ–±–ª–∞—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: ${GAME_CONFIG.canvasWidth}x${GAME_CONFIG.canvasHeight}`);
}

function createGraphicsChangeEffect(level) {
    // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Å–º–µ–Ω—ã –∫–∞—á–µ—Å—Ç–≤–∞ –≥—Ä–∞—Ñ–∏–∫–∏
    const colors = {
        'LOW': '#ff6b6b',
        'MED': '#ffd93d', 
        'HIGH': '#6bcf7f'
    };
    
    const color = colors[level] || '#ffffff';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    showGraphicsNotification(level, color);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç —á–∞—Å—Ç–∏—Ü–∞–º–∏ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
    if (level === 'HIGH' && hunterPlayer && preyPlayer) {
        // –ú–Ω–æ–≥–æ –∫—Ä–∞—Å–∏–≤—ã—Ö —á–∞—Å—Ç–∏—Ü –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ HIGH —Ä–µ–∂–∏–º–∞
        createOptimizedParticles(hunterPlayer.x, hunterPlayer.y, color, 30);
        createOptimizedParticles(preyPlayer.x, preyPlayer.y, color, 30);
    } else if (level === 'LOW') {
        // –ú–∞–ª–æ —á–∞—Å—Ç–∏—Ü –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ LOW —Ä–µ–∂–∏–º–∞
        if (hunterPlayer && preyPlayer) {
            createOptimizedParticles(hunterPlayer.x, hunterPlayer.y, color, 5);
            createOptimizedParticles(preyPlayer.x, preyPlayer.y, color, 5);
        }
    } else if (level === 'MED') {
        // –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–∏—Ü
        if (hunterPlayer && preyPlayer) {
            createOptimizedParticles(hunterPlayer.x, hunterPlayer.y, color, 15);
            createOptimizedParticles(preyPlayer.x, preyPlayer.y, color, 15);
        }
    }
}

function updateGraphicsToggleUI() {
    const options = document.querySelectorAll('.graphics-option');
    options.forEach(option => {
        option.classList.remove('active');
        if (option.dataset.level === GAME_CONFIG.graphicsLevel) {
            option.classList.add('active');
        }
    });
}

function initGraphicsToggle() {
    const toggle = document.getElementById('graphicsToggle');
    if (!toggle) return;
    
    toggle.addEventListener('click', (e) => {
        if (e.target.classList.contains('graphics-option')) {
            const level = e.target.dataset.level;
            setGraphicsLevel(level);
        }
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
    setGraphicsLevel('MED');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    updateCanvasResolution(GRAPHICS_PRESETS.MED.resolutionScale);
}

let graphicsNotification = {
    visible: false,
    text: '',
    color: '#ffffff',
    startTime: 0,
    duration: 2000
};

function showGraphicsNotification(level, color) {
    const preset = GRAPHICS_PRESETS[level];
    const resolutionText = `${Math.round(preset.resolutionScale * 100)}%`;
    
    graphicsNotification.visible = true;
    graphicsNotification.text = `${level} (${resolutionText})`;
    graphicsNotification.color = color;
    graphicsNotification.startTime = Date.now();
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        graphicsNotification.visible = false;
    }, graphicsNotification.duration);
}

function drawGraphicsNotification() {
    if (!graphicsNotification.visible) return;
    
    const elapsed = Date.now() - graphicsNotification.startTime;
    const progress = elapsed / graphicsNotification.duration;
    const alpha = Math.max(0, 1 - progress);
    
    ctx.save();
    ctx.globalAlpha = alpha;
    ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';
    ctx.fillRect(GAME_CONFIG.canvasWidth - 180, 80, 160, 40);
    
    ctx.fillStyle = graphicsNotification.color;
    ctx.font = '16px Consolas';
    ctx.textAlign = 'center';
    ctx.fillText(graphicsNotification.text, GAME_CONFIG.canvasWidth - 100, 105);
    ctx.restore();
}

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
requestAnimationFrame(gameLoop);

function updateUI(currentTime = 0) {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
    const elapsed = Math.floor(gameState.gameTime / 1000);
    const minutes = Math.floor(elapsed / 60);
    const seconds = elapsed % 60;
    const totalMinutes = Math.floor(GAME_CONFIG.roundTime / 60);
    const totalSeconds = GAME_CONFIG.roundTime % 60;
    const timeString = `${minutes}:${seconds.toString().padStart(2, '0')}`;

    const timer = document.getElementById('gameTimer');
    if (timer) timer.textContent = timeString;

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞
    const hunterScore = document.getElementById('punkScore');
    const preyScore = document.getElementById('businessmanScore');
    if (hunterScore) hunterScore.textContent = gameState.scores.hunter || 0;
    if (preyScore) preyScore.textContent = gameState.scores.prey || 0;

    // –ö—É–ª–¥–∞—É–Ω—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
    const punkCooldownBar = document.getElementById('punkCooldown');
    const businessmanCooldownBar = document.getElementById('businessmanCooldown');
    if (punkCooldownBar && hunterPlayer && playerConfig && playerConfig.hunter) {
        const hunterMaxCooldown = getCharacterCooldown(playerConfig.hunter.character);
        const hunterCooldownPercent = Math.max(0, (hunterMaxCooldown - hunterPlayer.ghostCooldown) / hunterMaxCooldown * 100);
        punkCooldownBar.style.width = `${hunterCooldownPercent}%`;
    }
    if (businessmanCooldownBar && preyPlayer && playerConfig && playerConfig.prey) {
        const preyMaxCooldown = getCharacterCooldown(playerConfig.prey.character);
        const preyCooldownPercent = Math.max(0, (preyMaxCooldown - preyPlayer.ghostCooldown) / preyMaxCooldown * 100);
        businessmanCooldownBar.style.width = `${preyCooldownPercent}%`;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞—Ö –∫—É–ª–¥–∞—É–Ω–∞
    updateCooldownLabels();


}



// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É–ª–¥–∞—É–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
function getCharacterCooldown(characterType) {
    switch(characterType) {
        case 'punk': // –°–∞–Ω—è - –ü—Ä–∏–∑—Ä–∞–∫
            return 8000; // 8 —Å–µ–∫—É–Ω–¥
        case 'businessman': // –õ–µ—Ö–∞ - –¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è
            return 5000; // 5 —Å–µ–∫—É–Ω–¥
        case 'kok': // –°—Ç–µ–ø–∞ - –£—Å–∫–æ—Ä–µ–Ω–∏–µ
            return 5000; // 5 —Å–µ–∫—É–Ω–¥
        case 'maks': // –ú–∞–∫—Å - –ì–∏–≥–∞–Ω—Ç
            return 8000; // 8 —Å–µ–∫—É–Ω–¥
        default:
            return 5000;
    }
}

function updateCooldownLabels() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –æ—Ö–æ—Ç–Ω–∏–∫–∞
    const hunterLabel = document.querySelector('.hunter-cooldown-indicator .cooldown-label');
    if (hunterLabel && playerConfig && playerConfig.hunter) {
        let abilityName = '';
        const hunterCharacter = playerConfig.hunter.character;
        
        switch(hunterCharacter) {
            case 'punk':
                abilityName = '–ü—Ä–∏–∑—Ä–∞–∫';
                break;
            case 'businessman':
                abilityName = '–¢–µ–ª–µ–ø–æ—Ä—Ç';
                break;
            case 'kok':
                abilityName = '–£—Å–∫–æ—Ä–µ–Ω–∏–µ';
                break;
            case 'maks':
                abilityName = '–ì–∏–≥–∞–Ω—Ç';
                break;
        }
        
        hunterLabel.textContent = `üéØ –û—Ö–æ—Ç–Ω–∏–∫: ${abilityName} (E)`;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –¥–æ–±—ã—á–∏
    const preyLabel = document.querySelector('.prey-cooldown-indicator .cooldown-label');
    if (preyLabel && playerConfig && playerConfig.prey) {
        let abilityName = '';
        const preyCharacter = playerConfig.prey.character;
        
        switch(preyCharacter) {
            case 'punk':
                abilityName = '–ü—Ä–∏–∑—Ä–∞–∫';
                break;
            case 'businessman':
                abilityName = '–¢–µ–ª–µ–ø–æ—Ä—Ç';
                break;
            case 'kok':
                abilityName = '–£—Å–∫–æ—Ä–µ–Ω–∏–µ';
                break;
            case 'maks':
                abilityName = '–ì–∏–≥–∞–Ω—Ç';
                break;
        }
        
        preyLabel.textContent = `üèÉ‚Äç‚ôÇÔ∏è –î–æ–±—ã—á–∞: ${abilityName} (/)`;
    }
}

function updateTensionEffects() {
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏
    const distance = getDistanceBetweenPlayers();
    const maxDistance = Math.sqrt(GAME_CONFIG.worldWidth * GAME_CONFIG.worldWidth + GAME_CONFIG.worldHeight * GAME_CONFIG.worldHeight);
    const tension = Math.max(0, 1 - (distance / (maxDistance / 3))); // –ß–µ–º –±–ª–∏–∂–µ, —Ç–µ–º –±–æ–ª—å—à–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–æ—Å—É –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è
    const tensionFill = document.getElementById('tensionFill');
    const tensionIndicator = document.getElementById('tensionIndicator');
    if (tensionFill) tensionFill.style.width = `${tension * 100}%`;

    // –í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–∏
    if (tensionIndicator) {
        if (tension > 0.7) {
            tensionIndicator.classList.add('tension-high');
        } else {
            tensionIndicator.classList.remove('tension-high');
        }
    }
}

// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ –º–∏—Ä–∞
function updatePlayerPositions() {
    const worldScale = Math.min(GAME_CONFIG.canvasWidth / 1680, GAME_CONFIG.canvasHeight / 900);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏ –ø–æ–∑–∏—Ü–∏–∏ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    Object.keys(players).forEach(key => {
        const player = players[key];
        
        // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–≥—Ä–æ–∫–∞
        player.width = player.originalWidth * worldScale;
        player.height = player.originalHeight * worldScale;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –∏ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–∑–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        player.maxSpeed = player.baseMaxSpeed * worldScale;
        player.acceleration = player.baseAcceleration * worldScale;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≥—Ä–∞–Ω–∏—Ü –º–∏—Ä–∞
        if (key === 'businessman' || key === 'maks') {
            player.x = GAME_CONFIG.worldWidth - 150 * worldScale;
            player.y = GAME_CONFIG.worldHeight - 150 * worldScale;
            player.lastSafeX = player.x;
            player.lastSafeY = player.y;
        } else {
            player.x = 100 * worldScale;
            player.y = 100 * worldScale;
            player.lastSafeX = player.x;
            player.lastSafeY = player.y;
        }
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è canvas —Å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å—é
function initializeCanvas() {
    const gameContainer = document.querySelector('.game-container');
    const containerRect = gameContainer.getBoundingClientRect();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã canvas
    const maxWidth = Math.min(1680, containerRect.width * 0.95);
    const maxHeight = Math.min(900, containerRect.height * 0.95);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ 1680:900 (–ø—Ä–∏–º–µ—Ä–Ω–æ 1.87:1)
    const aspectRatio = 1680 / 900;
    let canvasWidth, canvasHeight;
    
    if (maxWidth / maxHeight > aspectRatio) {
        canvasHeight = maxHeight;
        canvasWidth = canvasHeight * aspectRatio;
    } else {
        canvasWidth = maxWidth;
        canvasHeight = canvasWidth / aspectRatio;
    }
    
    canvas.width = canvasWidth;
    canvas.height = canvasHeight;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–≥—Ä—ã
    GAME_CONFIG.canvasWidth = canvasWidth;
    GAME_CONFIG.canvasHeight = canvasHeight;
    
    // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –º–∏—Ä–∞ –ø–æ–¥ canvas (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏)
    const worldScale = Math.min(canvasWidth / 1680, canvasHeight / 900);
    GAME_CONFIG.worldWidth = 2340 * worldScale;
    GAME_CONFIG.worldHeight = 1175 * worldScale;
    GAME_CONFIG.cellSize = 50 * worldScale;
    GAME_CONFIG.catchDistance = 45 * worldScale;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –º–∏–Ω–∏–∫–∞—Ä—Ç—ã
    const minimapScale = Math.min(canvasWidth / 1680, 1);
    minimap.width = 234 * minimapScale;
    minimap.height = 156 * minimapScale;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–æ–≤
    updatePlayerPositions();
    
    console.log(`Canvas —Ä–∞–∑–º–µ—Ä: ${canvasWidth}x${canvasHeight}, –ú–∏—Ä: ${GAME_CONFIG.worldWidth}x${GAME_CONFIG.worldHeight}`);
}

// ===============================
// üåê –ú–£–õ–¨–¢–ò–ü–õ–ï–ï–† –§–£–ù–ö–¶–ò–ò
// ===============================

// –§—É–Ω–∫—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞
function showMultiplayerMenu() {
    document.getElementById('startScreen').style.display = 'none';
    document.getElementById('multiplayerMenu').classList.add('active');
    initSocket();
}

function hideMultiplayerMenu() {
    document.getElementById('multiplayerMenu').classList.remove('active');
    document.getElementById('startScreen').style.display = 'flex';
}

function createRoom() {
    if (!socket || !socket.connected) {
        alert('–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É');
        return;
    }
    
    socket.emit('create-room');
    updateConnectionStatus('connecting', '–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã...');
}

function joinRoom() {
    const roomCode = document.getElementById('roomCodeInput').value.trim().toUpperCase();
    if (!roomCode) {
        alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã');
        return;
    }
    
    if (!socket || !socket.connected) {
        alert('–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É');
        return;
    }
    
    socket.emit('join-room', roomCode);
    updateConnectionStatus('connecting', '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ...');
}

function showLobby() {
    document.getElementById('multiplayerMenu').classList.remove('active');
    document.getElementById('lobbyScreen').classList.add('active');
}

function leaveLobby() {
    if (socket) {
        socket.emit('leave-room', onlineGameState.roomCode);
    }
    
    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    isOnlineMode = false;
    onlineGameState = {
        roomCode: null,
        playerId: null,
        playerRole: null,
        gameRole: null,
        myCharacter: null,
        opponentCharacter: null,
        isConnected: onlineGameState.isConnected,
        opponentPosition: { x: 0, y: 0, angle: 0 },
        lastSentPosition: { x: 0, y: 0, angle: 0 },
        inputBuffer: []
    };
    
    document.getElementById('lobbyScreen').classList.remove('active');
    document.getElementById('startScreen').style.display = 'flex';
}

function selectOnlineCharacter(character) {
    if (!socket || !onlineGameState.roomCode) return;
    
    onlineGameState.myCharacter = character;
    
    socket.emit('select-character', {
        roomCode: onlineGameState.roomCode,
        character: character
    });
    
    // –í–∏–∑—É–∞–ª—å–Ω–æ –≤—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    document.querySelectorAll('#lobbyCharacterSelection .character-option').forEach(el => {
        el.classList.remove('selected');
    });
    document.querySelector(`#lobbyCharacterSelection .character-option.${character}`).classList.add('selected');
}

function updateConnectionStatus(status, message) {
    const statusEl = document.getElementById('connectionStatus');
    if (!statusEl) return;
    
    statusEl.className = 'connection-status';
    statusEl.classList.add(`status-${status}`);
    statusEl.textContent = message;
}

function updateRoomCode(roomCode) {
    const displayEl = document.getElementById('roomCodeDisplay');
    if (displayEl) {
        displayEl.textContent = `–ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã: ${roomCode}`;
    }
}

function updatePlayersInLobby(players) {
    const hostCard = document.getElementById('hostCard');
    const guestCard = document.getElementById('guestCard');
    
    const host = players.find(p => p.role === 'host');
    const guest = players.find(p => p.role === 'guest');
    
    if (host) {
        document.getElementById('hostInfo').textContent = host.ready ? '–ì–æ—Ç–æ–≤' : '–í—ã–±–∏—Ä–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞';
        document.getElementById('hostCharacter').textContent = host.character ? getCharacterName(host.character) : '';
        hostCard.classList.toggle('ready', host.ready);
    }
    
    if (guest) {
        document.getElementById('guestInfo').textContent = guest.ready ? '–ì–æ—Ç–æ–≤' : '–í—ã–±–∏—Ä–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞';
        document.getElementById('guestCharacter').textContent = guest.character ? getCharacterName(guest.character) : '';
        guestCard.classList.toggle('ready', guest.ready);
        guestCard.classList.remove('empty');
    } else {
        document.getElementById('guestInfo').textContent = '–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...';
        document.getElementById('guestCharacter').textContent = '';
        guestCard.classList.remove('ready');
        guestCard.classList.add('empty');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ª–æ–±–±–∏
    const statusEl = document.getElementById('lobbyStatus');
    if (statusEl) {
        if (players.length === 2 && players.every(p => p.ready)) {
            statusEl.textContent = '–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã...';
            statusEl.className = 'connection-status status-connected';
        } else if (players.length === 2) {
            statusEl.textContent = '–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–æ–≤...';
            statusEl.className = 'connection-status status-connecting';
        } else {
            statusEl.textContent = '–û–∂–∏–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞...';
            statusEl.className = 'connection-status status-connecting';
        }
    }
}

function getCharacterName(character) {
    const names = {
        'punk': '–ü–∞–Ω–∫ –°–∞–Ω—è',
        'businessman': '–ë–∏–∑–Ω–µ—Å–º–µ–Ω –õ–µ—Ö–∞',  
        'kok': '–°—Ç–µ–ø–∞ –ö–æ–∫',
        'maks': '–ú–∞–∫—Å –ó–¥–æ—Ä–æ–≤—ã–π'
    };
    return names[character] || character;
}

// –§—É–Ω–∫—Ü–∏–∏ –∏–≥—Ä–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
function startOnlineGame() {
    // –°–∫—Ä—ã–≤–∞–µ–º –ª–æ–±–±–∏
    document.getElementById('lobbyScreen').classList.remove('active');
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –æ–Ω–ª–∞–π–Ω –∏–≥—Ä—ã
    playerConfig = getOnlinePlayerConfig();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
    gameState.mode = 'playing';
    gameState.startTime = Date.now();
    gameState.roundNumber = 1;
    gameState.scores = { hunter: 0, prey: 0 };
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ª–∞–±–∏—Ä–∏–Ω—Ç
    generateMaze();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤
    setupOnlinePlayers();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –º—É–∑—ã–∫—É
    playBackgroundMusic();
    
    // –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω
    hideStartScreen();
    
    console.log(`üéÆ –û–Ω–ª–∞–π–Ω –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –†–æ–ª—å: ${onlineGameState.gameRole}, –ü–µ—Ä—Å–æ–Ω–∞–∂: ${onlineGameState.myCharacter}`);
}

function getOnlinePlayerConfig() {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–µ–π –≤ –æ–Ω–ª–∞–π–Ω –∏–≥—Ä–µ
    const config = {
        hunter: {
            character: characterSelection.hunter,
            controls: onlineGameState.gameRole === 'hunter' ? getMyControls() : getOpponentControls()
        },
        prey: {
            character: characterSelection.prey,
            controls: onlineGameState.gameRole === 'prey' ? getMyControls() : getOpponentControls()
        }
    };
    
    return config;
}

function getMyControls() {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    return {
        up: GAME_CONFIG.controlsSwapped ? 'ArrowUp' : 'KeyW',
        down: GAME_CONFIG.controlsSwapped ? 'ArrowDown' : 'KeyS', 
        left: GAME_CONFIG.controlsSwapped ? 'ArrowLeft' : 'KeyA',
        right: GAME_CONFIG.controlsSwapped ? 'ArrowRight' : 'KeyD',
        action: GAME_CONFIG.controlsSwapped ? 'Slash' : 'KeyE'
    };
}

function getOpponentControls() {
    // –î–ª—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ —Å–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–æ–Ω–∏ —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –ø–æ —Å–µ—Ç–∏)
    return {
        up: null, down: null, left: null, right: null, action: null
    };
}

function setupOnlinePlayers() {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å–ø–∞–≤–Ω–∞
    function getRandomSpawnPoint() {
        let attempts = 0;
        while (attempts < 100) {
            const x = Math.random() * (GAME_CONFIG.worldWidth - 200) + 100;
            const y = Math.random() * (GAME_CONFIG.worldHeight - 200) + 100;
            
            const testPlayer = { x, y, width: 35, height: 45 };
            if (!checkWallCollision(testPlayer, x, y)) {
                return { x, y };
            }
            attempts++;
        }
        return { x: 100, y: 100 }; // Fallback
    }
    
    const hunterSpawn = getRandomSpawnPoint();
    const preySpawn = getRandomSpawnPoint();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    if (onlineGameState.gameRole === 'hunter') {
        // –Ø –æ—Ö–æ—Ç–Ω–∏–∫
        hunterPlayer = createPlayerCopy(players[onlineGameState.myCharacter], onlineGameState.myCharacter);
        hunterPlayer.x = hunterSpawn.x;
        hunterPlayer.y = hunterSpawn.y;
        
        // –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ - –¥–æ–±—ã—á–∞
        preyPlayer = createPlayerCopy(players[onlineGameState.opponentCharacter], onlineGameState.opponentCharacter);
        preyPlayer.x = preySpawn.x;
        preyPlayer.y = preySpawn.y;
    } else {
        // –Ø –¥–æ–±—ã—á–∞
        preyPlayer = createPlayerCopy(players[onlineGameState.myCharacter], onlineGameState.myCharacter);
        preyPlayer.x = preySpawn.x;
        preyPlayer.y = preySpawn.y;
        
        // –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ - –æ—Ö–æ—Ç–Ω–∏–∫
        hunterPlayer = createPlayerCopy(players[onlineGameState.opponentCharacter], onlineGameState.opponentCharacter);
        hunterPlayer.x = hunterSpawn.x;
        hunterPlayer.y = hunterSpawn.y;
    }
}

function updatePlayerFromInput(player, controls, characterType) {
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–≤–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –∫ –µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂—É
    const fakeKeys = {};
    if (controls.up) fakeKeys['ArrowUp'] = true;
    if (controls.down) fakeKeys['ArrowDown'] = true;  
    if (controls.left) fakeKeys['ArrowLeft'] = true;
    if (controls.right) fakeKeys['ArrowRight'] = true;
    if (controls.action) fakeKeys['Slash'] = true;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º –≤–≤–æ–¥–æ–º
    updatePlayer(player, { 
        up: controls.up,
        down: controls.down,
        left: controls.left, 
        right: controls.right,
        action: controls.action
    }, 16.67, characterType);
}

function sendPlayerInput(controls) {
    if (!socket || !isOnlineMode || !onlineGameState.roomCode) return;
    
    socket.emit('player-input', {
        roomCode: onlineGameState.roomCode,
        controls: controls,
        timestamp: Date.now()
    });
}

function sendPlayerPosition(player) {
    if (!socket || !isOnlineMode || !onlineGameState.roomCode) return;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
    const lastPos = onlineGameState.lastSentPosition;
    const threshold = 5; // –ø–∏–∫—Å–µ–ª–µ–π
    
    if (Math.abs(player.x - lastPos.x) > threshold || 
        Math.abs(player.y - lastPos.y) > threshold ||
        Math.abs(player.angle - lastPos.angle) > 0.1) {
        
        socket.emit('player-position', {
            roomCode: onlineGameState.roomCode,
            x: player.x,
            y: player.y,
            angle: player.angle,
            timestamp: Date.now()
        });
        
        onlineGameState.lastSentPosition = {
            x: player.x,
            y: player.y, 
            angle: player.angle
        };
    }
}

function sendGameEnd(winner) {
    if (!socket || !isOnlineMode || !onlineGameState.roomCode) return;
    
    socket.emit('game-end', {
        roomCode: onlineGameState.roomCode,
        winner: winner
    });
}

function sendBoosterCollected(boosterId) {
    if (!socket || !isOnlineMode || !onlineGameState.roomCode) return;
    
    socket.emit('booster-collected', {
        roomCode: onlineGameState.roomCode,
        boosterId: boosterId,
        timestamp: Date.now()
    });
}

function hideStartScreen() {
    const startScreen = document.getElementById('startScreen');
    if (startScreen) {
        startScreen.style.display = 'none';
    }
    
    // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å start-screen-active –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫—É–ª–¥–∞—É–Ω–æ–≤
    const gameContainer = document.querySelector('.game-container');
    if (gameContainer) {
        gameContainer.classList.remove('start-screen-active');
        gameContainer.classList.add('game-active');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
window.addEventListener('load', () => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    updateControlToggleUI();
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    console.log('üöÄ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Socket.IO –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    console.log('üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞...');
});
