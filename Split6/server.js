const express = require('express');
const { Server } = require('socket.io');
const cors = require('cors');
const path = require('path');

const app = express();
const server = require('http').createServer(app);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.use(cors());
app.use(express.static(path.join(__dirname)));

// Socket.IO —Å–µ—Ä–≤–µ—Ä
const io = new Server(server, {
    cors: {
        origin: "*",
        methods: ["GET", "POST"]
    }
});

// –ò–≥—Ä–æ–≤—ã–µ –∫–æ–º–Ω–∞—Ç—ã
const gameRooms = new Map();

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –∫–æ–º–Ω–∞—Ç—ã
function generateRoomCode() {
    return Math.random().toString(36).substring(2, 8).toUpperCase();
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã
function createRoom(hostSocketId) {
    const roomCode = generateRoomCode();
    const room = {
        code: roomCode,
        players: [
            { socketId: hostSocketId, role: 'host', ready: false, character: null }
        ],
        gameState: {
            mode: 'lobby', // lobby, playing, ended
            startTime: 0,
            roundNumber: 1,
            scores: { hunter: 0, prey: 0 },
            playerPositions: {},
            boosters: [],
            gameTime: 0
        },
        lastUpdate: Date.now()
    };
    
    gameRooms.set(roomCode, room);
    console.log(`üè† –ö–æ–º–Ω–∞—Ç–∞ ${roomCode} —Å–æ–∑–¥–∞–Ω–∞ —Ö–æ—Å—Ç–æ–º ${hostSocketId}`);
    return room;
}

// Socket.IO —Å–æ–±—ã—Ç–∏—è
io.on('connection', (socket) => {
    console.log(`üë§ –ò–≥—Ä–æ–∫ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: ${socket.id}`);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
    socket.on('create-room', () => {
        const room = createRoom(socket.id);
        socket.join(room.code);
        socket.emit('room-created', {
            roomCode: room.code,
            role: 'host'
        });
        console.log(`üéÆ –ò–≥—Ä–æ–∫ ${socket.id} —Å–æ–∑–¥–∞–ª –∫–æ–º–Ω–∞—Ç—É ${room.code}`);
    });
    
    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
    socket.on('join-room', (roomCode) => {
        const room = gameRooms.get(roomCode.toUpperCase());
        
        if (!room) {
            socket.emit('error', { message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
            return;
        }
        
        if (room.players.length >= 2) {
            socket.emit('error', { message: '–ö–æ–º–Ω–∞—Ç–∞ –ø–æ–ª–Ω–∞—è' });
            return;
        }
        
        if (room.gameState.mode !== 'lobby') {
            socket.emit('error', { message: '–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å' });
            return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç—É
        room.players.push({
            socketId: socket.id,
            role: 'guest',
            ready: false,
            character: null
        });
        
        socket.join(roomCode.toUpperCase());
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –≤ –∫–æ–º–Ω–∞—Ç–µ
        io.to(roomCode.toUpperCase()).emit('player-joined', {
            players: room.players.map(p => ({
                socketId: p.socketId,
                role: p.role,
                ready: p.ready,
                character: p.character
            }))
        });
        
        socket.emit('room-joined', {
            roomCode: roomCode.toUpperCase(),
            role: 'guest'
        });
        
        console.log(`üéÆ –ò–≥—Ä–æ–∫ ${socket.id} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ ${roomCode.toUpperCase()}`);
    });
    
    // –í—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    socket.on('select-character', (data) => {
        const room = gameRooms.get(data.roomCode);
        if (!room) return;
        
        const player = room.players.find(p => p.socketId === socket.id);
        if (player) {
            player.character = data.character;
            player.ready = true;
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –≤ –∫–æ–º–Ω–∞—Ç–µ
            io.to(data.roomCode).emit('character-selected', {
                socketId: socket.id,
                character: data.character,
                players: room.players.map(p => ({
                    socketId: p.socketId,
                    role: p.role,
                    ready: p.ready,
                    character: p.character
                }))
            });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ—Ç–æ–≤—ã –ª–∏ –≤—Å–µ –∏–≥—Ä–æ–∫–∏
            if (room.players.length === 2 && room.players.every(p => p.ready)) {
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª–∏
                const roles = ['hunter', 'prey'];
                const shuffledRoles = roles.sort(() => Math.random() - 0.5);
                
                room.players.forEach((player, index) => {
                    player.gameRole = shuffledRoles[index];
                });
                
                room.gameState.mode = 'playing';
                room.gameState.startTime = Date.now();
                
                io.to(data.roomCode).emit('game-start', {
                    players: room.players.map(p => ({
                        socketId: p.socketId,
                        character: p.character,
                        gameRole: p.gameRole
                    }))
                });
                
                console.log(`üöÄ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ ${data.roomCode}`);
            }
        }
    });
    
    // –î–≤–∏–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    socket.on('player-input', (data) => {
        const room = gameRooms.get(data.roomCode);
        if (!room || room.gameState.mode !== 'playing') return;
        
        // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤–≤–æ–¥ –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É
        socket.to(data.roomCode).emit('opponent-input', {
            socketId: socket.id,
            controls: data.controls,
            timestamp: data.timestamp
        });
    });
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
    socket.on('player-position', (data) => {
        const room = gameRooms.get(data.roomCode);
        if (!room || room.gameState.mode !== 'playing') return;
        
        room.gameState.playerPositions[socket.id] = {
            x: data.x,
            y: data.y,
            angle: data.angle,
            timestamp: data.timestamp
        };
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É
        socket.to(data.roomCode).emit('opponent-position', {
            socketId: socket.id,
            x: data.x,
            y: data.y,
            angle: data.angle,
            timestamp: data.timestamp
        });
    });
    
    // –°–±–æ—Ä –±—É—Å—Ç–µ—Ä–∞
    socket.on('booster-collected', (data) => {
        const room = gameRooms.get(data.roomCode);
        if (!room) return;
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–±–æ—Ä –±—É—Å—Ç–µ—Ä–∞ –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏
        io.to(data.roomCode).emit('booster-sync-collected', {
            boosterId: data.boosterId,
            collectorId: socket.id,
            timestamp: data.timestamp
        });
    });
    
    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
    socket.on('game-end', (data) => {
        const room = gameRooms.get(data.roomCode);
        if (!room) return;
        
        room.gameState.mode = 'ended';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç
        if (data.winner === 'hunter') {
            room.gameState.scores.hunter++;
        } else {
            room.gameState.scores.prey++;
        }
        
        io.to(data.roomCode).emit('game-ended', {
            winner: data.winner,
            scores: room.gameState.scores,
            roundNumber: room.gameState.roundNumber
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–æ–Ω—á–µ–Ω–∞ –ª–∏ —Å–µ—Ä–∏—è
        if (room.gameState.roundNumber >= 5) {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            const finalWinner = room.gameState.scores.hunter > room.gameState.scores.prey ? 'hunter' : 'prey';
            
            setTimeout(() => {
                io.to(data.roomCode).emit('series-ended', {
                    finalWinner: finalWinner,
                    finalScores: room.gameState.scores
                });
            }, 3000);
        } else {
            // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É
            setTimeout(() => {
                room.gameState.roundNumber++;
                room.gameState.mode = 'playing';
                room.gameState.startTime = Date.now();
                
                io.to(data.roomCode).emit('next-round', {
                    roundNumber: room.gameState.roundNumber,
                    scores: room.gameState.scores
                });
            }, 5000);
        }
        
        console.log(`üèÜ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ ${data.roomCode}, –ø–æ–±–µ–¥–∏—Ç–µ–ª—å: ${data.winner}`);
    });
    
    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    socket.on('disconnect', () => {
        console.log(`üëã –ò–≥—Ä–æ–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è: ${socket.id}`);
        
        // –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–Ω–∞—Ç—É –∏–≥—Ä–æ–∫–∞ –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö
        for (const [roomCode, room] of gameRooms.entries()) {
            const playerIndex = room.players.findIndex(p => p.socketId === socket.id);
            if (playerIndex !== -1) {
                room.players.splice(playerIndex, 1);
                
                if (room.players.length === 0) {
                    // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—É—é –∫–æ–º–Ω–∞—Ç—É
                    gameRooms.delete(roomCode);
                    console.log(`üóëÔ∏è –ö–æ–º–Ω–∞—Ç–∞ ${roomCode} —É–¥–∞–ª–µ–Ω–∞ (–ø—É—Å—Ç–∞—è)`);
                } else {
                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∏–≥—Ä–æ–∫–æ–≤
                    io.to(roomCode).emit('player-disconnected', {
                        disconnectedId: socket.id,
                        remainingPlayers: room.players.length
                    });
                }
                break;
            }
        }
    });
});

// –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
setInterval(() => {
    const now = Date.now();
    for (const [roomCode, room] of gameRooms.entries()) {
        if (now - room.lastUpdate > 300000) { // 5 –º–∏–Ω—É—Ç
            gameRooms.delete(roomCode);
            console.log(`üßπ –£–¥–∞–ª–µ–Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞: ${roomCode}`);
        }
    }
}, 300000);

const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
    console.log(`üöÄ Split6 —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üåê –î–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}`);
}); 